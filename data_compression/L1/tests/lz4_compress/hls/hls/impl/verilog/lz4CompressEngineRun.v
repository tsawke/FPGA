// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lz4CompressEngineRun_lz4CompressEngineRun,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=15.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=13.220000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=58,HLS_SYN_DSP=0,HLS_SYN_FF=3535,HLS_SYN_LUT=7228,HLS_VERSION=2024_2}" *)

module lz4CompressEngineRun (
        inStream_dout,
        inStream_empty_n,
        inStream_read,
        lz4Out_din,
        lz4Out_full_n,
        lz4Out_write,
        lz4Out_eos_din,
        lz4Out_eos_full_n,
        lz4Out_eos_write,
        lz4OutSize_din,
        lz4OutSize_full_n,
        lz4OutSize_write,
        max_lit_limit,
        input_size,
        core_idx,
        ap_clk,
        ap_rst,
        ap_start,
        max_lit_limit_ap_vld,
        ap_done,
        ap_ready,
        ap_idle
);


input  [7:0] inStream_dout;
input   inStream_empty_n;
output   inStream_read;
output  [7:0] lz4Out_din;
input   lz4Out_full_n;
output   lz4Out_write;
output  [0:0] lz4Out_eos_din;
input   lz4Out_eos_full_n;
output   lz4Out_eos_write;
output  [31:0] lz4OutSize_din;
input   lz4OutSize_full_n;
output   lz4OutSize_write;
output  [31:0] max_lit_limit;
input  [31:0] input_size;
input  [31:0] core_idx;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   max_lit_limit_ap_vld;
output   ap_done;
output   ap_ready;
output   ap_idle;

wire    lzCompress_6_4_65536_6_1_2048_64_U0_ap_start;
wire    lzCompress_6_4_65536_6_1_2048_64_U0_ap_done;
wire    lzCompress_6_4_65536_6_1_2048_64_U0_ap_continue;
wire    lzCompress_6_4_65536_6_1_2048_64_U0_ap_idle;
wire    lzCompress_6_4_65536_6_1_2048_64_U0_ap_ready;
wire    lzCompress_6_4_65536_6_1_2048_64_U0_start_out;
wire    lzCompress_6_4_65536_6_1_2048_64_U0_start_write;
wire    lzCompress_6_4_65536_6_1_2048_64_U0_inStream_read;
wire   [31:0] lzCompress_6_4_65536_6_1_2048_64_U0_compressdStream_din;
wire    lzCompress_6_4_65536_6_1_2048_64_U0_compressdStream_write;
wire   [31:0] lzCompress_6_4_65536_6_1_2048_64_U0_compressdStream_num_data_valid;
wire   [31:0] lzCompress_6_4_65536_6_1_2048_64_U0_compressdStream_fifo_cap;
wire   [31:0] lzCompress_6_4_65536_6_1_2048_64_U0_input_size_c2_din;
wire    lzCompress_6_4_65536_6_1_2048_64_U0_input_size_c2_write;
wire    lzBestMatchFilter_6_65536_U0_ap_start;
wire    lzBestMatchFilter_6_65536_U0_ap_done;
wire    lzBestMatchFilter_6_65536_U0_ap_continue;
wire    lzBestMatchFilter_6_65536_U0_ap_idle;
wire    lzBestMatchFilter_6_65536_U0_ap_ready;
wire    lzBestMatchFilter_6_65536_U0_start_out;
wire    lzBestMatchFilter_6_65536_U0_start_write;
wire    lzBestMatchFilter_6_65536_U0_compressdStream_read;
wire   [31:0] lzBestMatchFilter_6_65536_U0_bestMatchStream_din;
wire    lzBestMatchFilter_6_65536_U0_bestMatchStream_write;
wire   [31:0] lzBestMatchFilter_6_65536_U0_bestMatchStream_num_data_valid;
wire   [31:0] lzBestMatchFilter_6_65536_U0_bestMatchStream_fifo_cap;
wire    lzBestMatchFilter_6_65536_U0_input_size_read;
wire   [31:0] lzBestMatchFilter_6_65536_U0_input_size_c1_din;
wire    lzBestMatchFilter_6_65536_U0_input_size_c1_write;
wire    lzBooster_255_16384_64_U0_ap_start;
wire    lzBooster_255_16384_64_U0_ap_done;
wire    lzBooster_255_16384_64_U0_ap_continue;
wire    lzBooster_255_16384_64_U0_ap_idle;
wire    lzBooster_255_16384_64_U0_ap_ready;
wire    lzBooster_255_16384_64_U0_start_out;
wire    lzBooster_255_16384_64_U0_start_write;
wire    lzBooster_255_16384_64_U0_bestMatchStream_read;
wire   [31:0] lzBooster_255_16384_64_U0_boosterStream_din;
wire    lzBooster_255_16384_64_U0_boosterStream_write;
wire   [31:0] lzBooster_255_16384_64_U0_boosterStream_num_data_valid;
wire   [31:0] lzBooster_255_16384_64_U0_boosterStream_fifo_cap;
wire    lzBooster_255_16384_64_U0_input_size_read;
wire   [31:0] lzBooster_255_16384_64_U0_input_size_c_din;
wire    lzBooster_255_16384_64_U0_input_size_c_write;
wire    lz4Compress_4096_1_U0_boosterStream_read;
wire   [7:0] lz4Compress_4096_1_U0_lz4Out_din;
wire    lz4Compress_4096_1_U0_lz4Out_write;
wire   [31:0] lz4Compress_4096_1_U0_max_lit_limit;
wire    lz4Compress_4096_1_U0_input_size_read;
wire   [0:0] lz4Compress_4096_1_U0_lz4Out_eos_din;
wire    lz4Compress_4096_1_U0_lz4Out_eos_write;
wire   [31:0] lz4Compress_4096_1_U0_lz4OutSize_din;
wire    lz4Compress_4096_1_U0_lz4OutSize_write;
wire    lz4Compress_4096_1_U0_max_lit_limit_ap_vld;
wire    lz4Compress_4096_1_U0_ap_start;
wire    lz4Compress_4096_1_U0_ap_done;
wire    lz4Compress_4096_1_U0_ap_ready;
wire    lz4Compress_4096_1_U0_ap_idle;
wire    lz4Compress_4096_1_U0_ap_continue;
wire    compressdStream_full_n;
wire   [31:0] compressdStream_dout;
wire    compressdStream_empty_n;
wire   [3:0] compressdStream_num_data_valid;
wire   [3:0] compressdStream_fifo_cap;
wire    input_size_c2_full_n;
wire   [31:0] input_size_c2_dout;
wire    input_size_c2_empty_n;
wire   [2:0] input_size_c2_num_data_valid;
wire   [2:0] input_size_c2_fifo_cap;
wire    bestMatchStream_full_n;
wire   [31:0] bestMatchStream_dout;
wire    bestMatchStream_empty_n;
wire   [3:0] bestMatchStream_num_data_valid;
wire   [3:0] bestMatchStream_fifo_cap;
wire    input_size_c1_full_n;
wire   [31:0] input_size_c1_dout;
wire    input_size_c1_empty_n;
wire   [2:0] input_size_c1_num_data_valid;
wire   [2:0] input_size_c1_fifo_cap;
wire    boosterStream_full_n;
wire   [31:0] boosterStream_dout;
wire    boosterStream_empty_n;
wire   [3:0] boosterStream_num_data_valid;
wire   [3:0] boosterStream_fifo_cap;
wire    input_size_c_full_n;
wire   [31:0] input_size_c_dout;
wire    input_size_c_empty_n;
wire   [2:0] input_size_c_num_data_valid;
wire   [2:0] input_size_c_fifo_cap;
wire   [0:0] start_for_lzBestMatchFilter_6_65536_U0_din;
wire    start_for_lzBestMatchFilter_6_65536_U0_full_n;
wire   [0:0] start_for_lzBestMatchFilter_6_65536_U0_dout;
wire    start_for_lzBestMatchFilter_6_65536_U0_empty_n;
wire   [0:0] start_for_lzBooster_255_16384_64_U0_din;
wire    start_for_lzBooster_255_16384_64_U0_full_n;
wire   [0:0] start_for_lzBooster_255_16384_64_U0_dout;
wire    start_for_lzBooster_255_16384_64_U0_empty_n;
wire   [0:0] start_for_lz4Compress_4096_1_U0_din;
wire    start_for_lz4Compress_4096_1_U0_full_n;
wire   [0:0] start_for_lz4Compress_4096_1_U0_dout;
wire    start_for_lz4Compress_4096_1_U0_empty_n;

lz4CompressEngineRun_lzCompress_6_4_65536_6_1_2048_64_s lzCompress_6_4_65536_6_1_2048_64_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(lzCompress_6_4_65536_6_1_2048_64_U0_ap_start),
    .start_full_n(start_for_lzBestMatchFilter_6_65536_U0_full_n),
    .ap_done(lzCompress_6_4_65536_6_1_2048_64_U0_ap_done),
    .ap_continue(lzCompress_6_4_65536_6_1_2048_64_U0_ap_continue),
    .ap_idle(lzCompress_6_4_65536_6_1_2048_64_U0_ap_idle),
    .ap_ready(lzCompress_6_4_65536_6_1_2048_64_U0_ap_ready),
    .start_out(lzCompress_6_4_65536_6_1_2048_64_U0_start_out),
    .start_write(lzCompress_6_4_65536_6_1_2048_64_U0_start_write),
    .inStream_dout(inStream_dout),
    .inStream_empty_n(inStream_empty_n),
    .inStream_read(lzCompress_6_4_65536_6_1_2048_64_U0_inStream_read),
    .compressdStream_din(lzCompress_6_4_65536_6_1_2048_64_U0_compressdStream_din),
    .compressdStream_full_n(compressdStream_full_n),
    .compressdStream_write(lzCompress_6_4_65536_6_1_2048_64_U0_compressdStream_write),
    .compressdStream_num_data_valid(lzCompress_6_4_65536_6_1_2048_64_U0_compressdStream_num_data_valid),
    .compressdStream_fifo_cap(lzCompress_6_4_65536_6_1_2048_64_U0_compressdStream_fifo_cap),
    .input_size(input_size),
    .input_size_c2_din(lzCompress_6_4_65536_6_1_2048_64_U0_input_size_c2_din),
    .input_size_c2_full_n(input_size_c2_full_n),
    .input_size_c2_write(lzCompress_6_4_65536_6_1_2048_64_U0_input_size_c2_write),
    .input_size_c2_num_data_valid(input_size_c2_num_data_valid),
    .input_size_c2_fifo_cap(input_size_c2_fifo_cap)
);

lz4CompressEngineRun_lzBestMatchFilter_6_65536_s lzBestMatchFilter_6_65536_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(lzBestMatchFilter_6_65536_U0_ap_start),
    .start_full_n(start_for_lzBooster_255_16384_64_U0_full_n),
    .ap_done(lzBestMatchFilter_6_65536_U0_ap_done),
    .ap_continue(lzBestMatchFilter_6_65536_U0_ap_continue),
    .ap_idle(lzBestMatchFilter_6_65536_U0_ap_idle),
    .ap_ready(lzBestMatchFilter_6_65536_U0_ap_ready),
    .start_out(lzBestMatchFilter_6_65536_U0_start_out),
    .start_write(lzBestMatchFilter_6_65536_U0_start_write),
    .compressdStream_dout(compressdStream_dout),
    .compressdStream_empty_n(compressdStream_empty_n),
    .compressdStream_read(lzBestMatchFilter_6_65536_U0_compressdStream_read),
    .compressdStream_num_data_valid(compressdStream_num_data_valid),
    .compressdStream_fifo_cap(compressdStream_fifo_cap),
    .bestMatchStream_din(lzBestMatchFilter_6_65536_U0_bestMatchStream_din),
    .bestMatchStream_full_n(bestMatchStream_full_n),
    .bestMatchStream_write(lzBestMatchFilter_6_65536_U0_bestMatchStream_write),
    .bestMatchStream_num_data_valid(lzBestMatchFilter_6_65536_U0_bestMatchStream_num_data_valid),
    .bestMatchStream_fifo_cap(lzBestMatchFilter_6_65536_U0_bestMatchStream_fifo_cap),
    .input_size_dout(input_size_c2_dout),
    .input_size_empty_n(input_size_c2_empty_n),
    .input_size_read(lzBestMatchFilter_6_65536_U0_input_size_read),
    .input_size_num_data_valid(input_size_c2_num_data_valid),
    .input_size_fifo_cap(input_size_c2_fifo_cap),
    .input_size_c1_din(lzBestMatchFilter_6_65536_U0_input_size_c1_din),
    .input_size_c1_full_n(input_size_c1_full_n),
    .input_size_c1_write(lzBestMatchFilter_6_65536_U0_input_size_c1_write),
    .input_size_c1_num_data_valid(input_size_c1_num_data_valid),
    .input_size_c1_fifo_cap(input_size_c1_fifo_cap)
);

lz4CompressEngineRun_lzBooster_255_16384_64_s lzBooster_255_16384_64_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(lzBooster_255_16384_64_U0_ap_start),
    .start_full_n(start_for_lz4Compress_4096_1_U0_full_n),
    .ap_done(lzBooster_255_16384_64_U0_ap_done),
    .ap_continue(lzBooster_255_16384_64_U0_ap_continue),
    .ap_idle(lzBooster_255_16384_64_U0_ap_idle),
    .ap_ready(lzBooster_255_16384_64_U0_ap_ready),
    .start_out(lzBooster_255_16384_64_U0_start_out),
    .start_write(lzBooster_255_16384_64_U0_start_write),
    .bestMatchStream_dout(bestMatchStream_dout),
    .bestMatchStream_empty_n(bestMatchStream_empty_n),
    .bestMatchStream_read(lzBooster_255_16384_64_U0_bestMatchStream_read),
    .bestMatchStream_num_data_valid(bestMatchStream_num_data_valid),
    .bestMatchStream_fifo_cap(bestMatchStream_fifo_cap),
    .boosterStream_din(lzBooster_255_16384_64_U0_boosterStream_din),
    .boosterStream_full_n(boosterStream_full_n),
    .boosterStream_write(lzBooster_255_16384_64_U0_boosterStream_write),
    .boosterStream_num_data_valid(lzBooster_255_16384_64_U0_boosterStream_num_data_valid),
    .boosterStream_fifo_cap(lzBooster_255_16384_64_U0_boosterStream_fifo_cap),
    .input_size_dout(input_size_c1_dout),
    .input_size_empty_n(input_size_c1_empty_n),
    .input_size_read(lzBooster_255_16384_64_U0_input_size_read),
    .input_size_num_data_valid(input_size_c1_num_data_valid),
    .input_size_fifo_cap(input_size_c1_fifo_cap),
    .input_size_c_din(lzBooster_255_16384_64_U0_input_size_c_din),
    .input_size_c_full_n(input_size_c_full_n),
    .input_size_c_write(lzBooster_255_16384_64_U0_input_size_c_write),
    .input_size_c_num_data_valid(input_size_c_num_data_valid),
    .input_size_c_fifo_cap(input_size_c_fifo_cap)
);

lz4CompressEngineRun_lz4Compress_4096_1_s lz4Compress_4096_1_U0(
    .boosterStream_dout(boosterStream_dout),
    .boosterStream_empty_n(boosterStream_empty_n),
    .boosterStream_read(lz4Compress_4096_1_U0_boosterStream_read),
    .lz4Out_din(lz4Compress_4096_1_U0_lz4Out_din),
    .lz4Out_full_n(lz4Out_full_n),
    .lz4Out_write(lz4Compress_4096_1_U0_lz4Out_write),
    .max_lit_limit(lz4Compress_4096_1_U0_max_lit_limit),
    .input_size_dout(input_size_c_dout),
    .input_size_empty_n(input_size_c_empty_n),
    .input_size_read(lz4Compress_4096_1_U0_input_size_read),
    .lz4Out_eos_din(lz4Compress_4096_1_U0_lz4Out_eos_din),
    .lz4Out_eos_full_n(lz4Out_eos_full_n),
    .lz4Out_eos_write(lz4Compress_4096_1_U0_lz4Out_eos_write),
    .lz4OutSize_din(lz4Compress_4096_1_U0_lz4OutSize_din),
    .lz4OutSize_full_n(lz4OutSize_full_n),
    .lz4OutSize_write(lz4Compress_4096_1_U0_lz4OutSize_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .max_lit_limit_ap_vld(lz4Compress_4096_1_U0_max_lit_limit_ap_vld),
    .ap_start(lz4Compress_4096_1_U0_ap_start),
    .ap_done(lz4Compress_4096_1_U0_ap_done),
    .ap_ready(lz4Compress_4096_1_U0_ap_ready),
    .ap_idle(lz4Compress_4096_1_U0_ap_idle),
    .ap_continue(lz4Compress_4096_1_U0_ap_continue)
);

lz4CompressEngineRun_fifo_w32_d8_S compressdStream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(lzCompress_6_4_65536_6_1_2048_64_U0_compressdStream_din),
    .if_full_n(compressdStream_full_n),
    .if_write(lzCompress_6_4_65536_6_1_2048_64_U0_compressdStream_write),
    .if_dout(compressdStream_dout),
    .if_empty_n(compressdStream_empty_n),
    .if_read(lzBestMatchFilter_6_65536_U0_compressdStream_read),
    .if_num_data_valid(compressdStream_num_data_valid),
    .if_fifo_cap(compressdStream_fifo_cap)
);

lz4CompressEngineRun_fifo_w32_d2_S_x input_size_c2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(lzCompress_6_4_65536_6_1_2048_64_U0_input_size_c2_din),
    .if_full_n(input_size_c2_full_n),
    .if_write(lzCompress_6_4_65536_6_1_2048_64_U0_input_size_c2_write),
    .if_dout(input_size_c2_dout),
    .if_empty_n(input_size_c2_empty_n),
    .if_read(lzBestMatchFilter_6_65536_U0_input_size_read),
    .if_num_data_valid(input_size_c2_num_data_valid),
    .if_fifo_cap(input_size_c2_fifo_cap)
);

lz4CompressEngineRun_fifo_w32_d8_S bestMatchStream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(lzBestMatchFilter_6_65536_U0_bestMatchStream_din),
    .if_full_n(bestMatchStream_full_n),
    .if_write(lzBestMatchFilter_6_65536_U0_bestMatchStream_write),
    .if_dout(bestMatchStream_dout),
    .if_empty_n(bestMatchStream_empty_n),
    .if_read(lzBooster_255_16384_64_U0_bestMatchStream_read),
    .if_num_data_valid(bestMatchStream_num_data_valid),
    .if_fifo_cap(bestMatchStream_fifo_cap)
);

lz4CompressEngineRun_fifo_w32_d2_S_x input_size_c1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(lzBestMatchFilter_6_65536_U0_input_size_c1_din),
    .if_full_n(input_size_c1_full_n),
    .if_write(lzBestMatchFilter_6_65536_U0_input_size_c1_write),
    .if_dout(input_size_c1_dout),
    .if_empty_n(input_size_c1_empty_n),
    .if_read(lzBooster_255_16384_64_U0_input_size_read),
    .if_num_data_valid(input_size_c1_num_data_valid),
    .if_fifo_cap(input_size_c1_fifo_cap)
);

lz4CompressEngineRun_fifo_w32_d8_S boosterStream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(lzBooster_255_16384_64_U0_boosterStream_din),
    .if_full_n(boosterStream_full_n),
    .if_write(lzBooster_255_16384_64_U0_boosterStream_write),
    .if_dout(boosterStream_dout),
    .if_empty_n(boosterStream_empty_n),
    .if_read(lz4Compress_4096_1_U0_boosterStream_read),
    .if_num_data_valid(boosterStream_num_data_valid),
    .if_fifo_cap(boosterStream_fifo_cap)
);

lz4CompressEngineRun_fifo_w32_d2_S_x input_size_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(lzBooster_255_16384_64_U0_input_size_c_din),
    .if_full_n(input_size_c_full_n),
    .if_write(lzBooster_255_16384_64_U0_input_size_c_write),
    .if_dout(input_size_c_dout),
    .if_empty_n(input_size_c_empty_n),
    .if_read(lz4Compress_4096_1_U0_input_size_read),
    .if_num_data_valid(input_size_c_num_data_valid),
    .if_fifo_cap(input_size_c_fifo_cap)
);

lz4CompressEngineRun_start_for_lzBestMatchFilter_6_65536_U0 start_for_lzBestMatchFilter_6_65536_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_lzBestMatchFilter_6_65536_U0_din),
    .if_full_n(start_for_lzBestMatchFilter_6_65536_U0_full_n),
    .if_write(lzCompress_6_4_65536_6_1_2048_64_U0_start_write),
    .if_dout(start_for_lzBestMatchFilter_6_65536_U0_dout),
    .if_empty_n(start_for_lzBestMatchFilter_6_65536_U0_empty_n),
    .if_read(lzBestMatchFilter_6_65536_U0_ap_ready)
);

lz4CompressEngineRun_start_for_lzBooster_255_16384_64_U0 start_for_lzBooster_255_16384_64_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_lzBooster_255_16384_64_U0_din),
    .if_full_n(start_for_lzBooster_255_16384_64_U0_full_n),
    .if_write(lzBestMatchFilter_6_65536_U0_start_write),
    .if_dout(start_for_lzBooster_255_16384_64_U0_dout),
    .if_empty_n(start_for_lzBooster_255_16384_64_U0_empty_n),
    .if_read(lzBooster_255_16384_64_U0_ap_ready)
);

lz4CompressEngineRun_start_for_lz4Compress_4096_1_U0 start_for_lz4Compress_4096_1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_lz4Compress_4096_1_U0_din),
    .if_full_n(start_for_lz4Compress_4096_1_U0_full_n),
    .if_write(lzBooster_255_16384_64_U0_start_write),
    .if_dout(start_for_lz4Compress_4096_1_U0_dout),
    .if_empty_n(start_for_lz4Compress_4096_1_U0_empty_n),
    .if_read(lz4Compress_4096_1_U0_ap_ready)
);

assign ap_done = lz4Compress_4096_1_U0_ap_done;

assign ap_idle = (lzCompress_6_4_65536_6_1_2048_64_U0_ap_idle & lzBooster_255_16384_64_U0_ap_idle & lzBestMatchFilter_6_65536_U0_ap_idle & lz4Compress_4096_1_U0_ap_idle);

assign ap_ready = lzCompress_6_4_65536_6_1_2048_64_U0_ap_ready;

assign inStream_read = lzCompress_6_4_65536_6_1_2048_64_U0_inStream_read;

assign lz4Compress_4096_1_U0_ap_continue = 1'b1;

assign lz4Compress_4096_1_U0_ap_start = start_for_lz4Compress_4096_1_U0_empty_n;

assign lz4OutSize_din = lz4Compress_4096_1_U0_lz4OutSize_din;

assign lz4OutSize_write = lz4Compress_4096_1_U0_lz4OutSize_write;

assign lz4Out_din = lz4Compress_4096_1_U0_lz4Out_din;

assign lz4Out_eos_din = lz4Compress_4096_1_U0_lz4Out_eos_din;

assign lz4Out_eos_write = lz4Compress_4096_1_U0_lz4Out_eos_write;

assign lz4Out_write = lz4Compress_4096_1_U0_lz4Out_write;

assign lzBestMatchFilter_6_65536_U0_ap_continue = 1'b1;

assign lzBestMatchFilter_6_65536_U0_ap_start = start_for_lzBestMatchFilter_6_65536_U0_empty_n;

assign lzBestMatchFilter_6_65536_U0_bestMatchStream_fifo_cap = bestMatchStream_fifo_cap;

assign lzBestMatchFilter_6_65536_U0_bestMatchStream_num_data_valid = bestMatchStream_num_data_valid;

assign lzBooster_255_16384_64_U0_ap_continue = 1'b1;

assign lzBooster_255_16384_64_U0_ap_start = start_for_lzBooster_255_16384_64_U0_empty_n;

assign lzBooster_255_16384_64_U0_boosterStream_fifo_cap = boosterStream_fifo_cap;

assign lzBooster_255_16384_64_U0_boosterStream_num_data_valid = boosterStream_num_data_valid;

assign lzCompress_6_4_65536_6_1_2048_64_U0_ap_continue = 1'b1;

assign lzCompress_6_4_65536_6_1_2048_64_U0_ap_start = ap_start;

assign lzCompress_6_4_65536_6_1_2048_64_U0_compressdStream_fifo_cap = compressdStream_fifo_cap;

assign lzCompress_6_4_65536_6_1_2048_64_U0_compressdStream_num_data_valid = compressdStream_num_data_valid;

assign max_lit_limit = lz4Compress_4096_1_U0_max_lit_limit;

assign max_lit_limit_ap_vld = lz4Compress_4096_1_U0_max_lit_limit_ap_vld;

assign start_for_lz4Compress_4096_1_U0_din = 1'b1;

assign start_for_lzBestMatchFilter_6_65536_U0_din = 1'b1;

assign start_for_lzBooster_255_16384_64_U0_din = 1'b1;


reg find_df_deadlock = 0;
// synthesis translate_off
`include "lz4CompressEngineRun_hls_deadlock_detector.vh"
// synthesis translate_on

endmodule //lz4CompressEngineRun

