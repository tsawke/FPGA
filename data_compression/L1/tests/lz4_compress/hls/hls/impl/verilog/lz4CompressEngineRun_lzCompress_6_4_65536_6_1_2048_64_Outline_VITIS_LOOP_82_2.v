// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module lz4CompressEngineRun_lzCompress_6_4_65536_6_1_2048_64_Outline_VITIS_LOOP_82_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inStream_dout,
        inStream_empty_n,
        inStream_read,
        present_window_4_out,
        present_window_4_out_ap_vld,
        present_window_3_out,
        present_window_3_out_ap_vld,
        present_window_2_out,
        present_window_2_out_ap_vld,
        present_window_1_out,
        present_window_1_out_ap_vld,
        present_window_out,
        present_window_out_ap_vld,
        arrayidx55_promoted157_out,
        arrayidx55_promoted157_out_ap_vld,
        arrayidx46_3_promoted155_out,
        arrayidx46_3_promoted155_out_ap_vld,
        arrayidx65_promoted153_out,
        arrayidx65_promoted153_out_ap_vld,
        arrayidx61_promoted151_out,
        arrayidx61_promoted151_out_ap_vld,
        arrayidx58_promoted149_out,
        arrayidx58_promoted149_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] inStream_dout;
input   inStream_empty_n;
output   inStream_read;
output  [7:0] present_window_4_out;
output   present_window_4_out_ap_vld;
output  [7:0] present_window_3_out;
output   present_window_3_out_ap_vld;
output  [7:0] present_window_2_out;
output   present_window_2_out_ap_vld;
output  [7:0] present_window_1_out;
output   present_window_1_out_ap_vld;
output  [7:0] present_window_out;
output   present_window_out_ap_vld;
output  [7:0] arrayidx55_promoted157_out;
output   arrayidx55_promoted157_out_ap_vld;
output  [7:0] arrayidx46_3_promoted155_out;
output   arrayidx46_3_promoted155_out_ap_vld;
output  [7:0] arrayidx65_promoted153_out;
output   arrayidx65_promoted153_out_ap_vld;
output  [7:0] arrayidx61_promoted151_out;
output   arrayidx61_promoted151_out_ap_vld;
output  [7:0] arrayidx58_promoted149_out;
output   arrayidx58_promoted149_out_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inStream_read;
reg present_window_4_out_ap_vld;
reg present_window_3_out_ap_vld;
reg present_window_2_out_ap_vld;
reg present_window_1_out_ap_vld;
reg present_window_out_ap_vld;
reg arrayidx55_promoted157_out_ap_vld;
reg arrayidx46_3_promoted155_out_ap_vld;
reg arrayidx65_promoted153_out_ap_vld;
reg arrayidx61_promoted151_out_ap_vld;
reg arrayidx58_promoted149_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    inStream_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln82_fu_186_p2;
reg   [2:0] i_1_fu_58;
wire   [2:0] add_ln82_fu_242_p2;
reg    ap_block_state2;
wire   [2:0] i_load_fu_183_p1;
reg   [7:0] arrayidx58_promoted149_fu_62;
reg   [7:0] arrayidx61_promoted151_fu_66;
reg   [7:0] arrayidx65_promoted153_fu_70;
reg   [7:0] arrayidx46_3_promoted155_fu_74;
reg   [7:0] arrayidx55_promoted157_fu_78;
reg   [7:0] present_window_fu_82;
reg   [7:0] present_window_1_fu_86;
reg   [7:0] present_window_2_fu_90;
reg   [7:0] present_window_3_fu_94;
reg   [7:0] present_window_4_fu_98;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 i_1_fu_58 = 3'd0;
#0 arrayidx58_promoted149_fu_62 = 8'd0;
#0 arrayidx61_promoted151_fu_66 = 8'd0;
#0 arrayidx65_promoted153_fu_70 = 8'd0;
#0 arrayidx46_3_promoted155_fu_74 = 8'd0;
#0 arrayidx55_promoted157_fu_78 = 8'd0;
#0 present_window_fu_82 = 8'd0;
#0 present_window_1_fu_86 = 8'd0;
#0 present_window_2_fu_90 = 8'd0;
#0 present_window_3_fu_94 = 8'd0;
#0 present_window_4_fu_98 = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_1_fu_58 <= 3'd1;
    end else if (((1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_fu_58 <= add_ln82_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((i_load_fu_183_p1 == 3'd4) & (1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        arrayidx46_3_promoted155_fu_74 <= inStream_dout;
        present_window_3_fu_94 <= inStream_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_load_fu_183_p1 == 3'd3) & ~(i_load_fu_183_p1 == 3'd2) & ~(i_load_fu_183_p1 == 3'd1) & ~(i_load_fu_183_p1 == 3'd4) & (1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        arrayidx55_promoted157_fu_78 <= inStream_dout;
        present_window_4_fu_98 <= inStream_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((i_load_fu_183_p1 == 3'd1) & (1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        arrayidx58_promoted149_fu_62 <= inStream_dout;
        present_window_fu_82 <= inStream_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((i_load_fu_183_p1 == 3'd2) & (1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        arrayidx61_promoted151_fu_66 <= inStream_dout;
        present_window_1_fu_86 <= inStream_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((i_load_fu_183_p1 == 3'd3) & (1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        arrayidx65_promoted153_fu_70 <= inStream_dout;
        present_window_2_fu_90 <= inStream_dout;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        arrayidx46_3_promoted155_out_ap_vld = 1'b1;
    end else begin
        arrayidx46_3_promoted155_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        arrayidx55_promoted157_out_ap_vld = 1'b1;
    end else begin
        arrayidx55_promoted157_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        arrayidx58_promoted149_out_ap_vld = 1'b1;
    end else begin
        arrayidx58_promoted149_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        arrayidx61_promoted151_out_ap_vld = 1'b1;
    end else begin
        arrayidx61_promoted151_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        arrayidx65_promoted153_out_ap_vld = 1'b1;
    end else begin
        arrayidx65_promoted153_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln82_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        inStream_blk_n = inStream_empty_n;
    end else begin
        inStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        inStream_read = 1'b1;
    end else begin
        inStream_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        present_window_1_out_ap_vld = 1'b1;
    end else begin
        present_window_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        present_window_2_out_ap_vld = 1'b1;
    end else begin
        present_window_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        present_window_3_out_ap_vld = 1'b1;
    end else begin
        present_window_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        present_window_4_out_ap_vld = 1'b1;
    end else begin
        present_window_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        present_window_out_ap_vld = 1'b1;
    end else begin
        present_window_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state2) & (icmp_ln82_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln82_fu_242_p2 = (i_1_fu_58 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2 = ((icmp_ln82_fu_186_p2 == 1'd0) & (inStream_empty_n == 1'b0));
end

assign arrayidx46_3_promoted155_out = arrayidx46_3_promoted155_fu_74;

assign arrayidx55_promoted157_out = arrayidx55_promoted157_fu_78;

assign arrayidx58_promoted149_out = arrayidx58_promoted149_fu_62;

assign arrayidx61_promoted151_out = arrayidx61_promoted151_fu_66;

assign arrayidx65_promoted153_out = arrayidx65_promoted153_fu_70;

assign i_load_fu_183_p1 = i_1_fu_58;

assign icmp_ln82_fu_186_p2 = ((i_1_fu_58 == 3'd6) ? 1'b1 : 1'b0);

assign present_window_1_out = present_window_1_fu_86;

assign present_window_2_out = present_window_2_fu_90;

assign present_window_3_out = present_window_3_fu_94;

assign present_window_4_out = present_window_4_fu_98;

assign present_window_out = present_window_fu_82;

endmodule //lz4CompressEngineRun_lzCompress_6_4_65536_6_1_2048_64_Outline_VITIS_LOOP_82_2
