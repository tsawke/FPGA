// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module lz4CompressEngineRun_lz4CompressPart2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        lit_outStream_dout,
        lit_outStream_empty_n,
        lit_outStream_read,
        lit_outStream_num_data_valid,
        lit_outStream_fifo_cap,
        lenOffset_Stream_dout,
        lenOffset_Stream_empty_n,
        lenOffset_Stream_read,
        lenOffset_Stream_num_data_valid,
        lenOffset_Stream_fifo_cap,
        lz4Out_din,
        lz4Out_full_n,
        lz4Out_write,
        lz4Out_eos_din,
        lz4Out_eos_full_n,
        lz4Out_eos_write,
        lz4OutSize_din,
        lz4OutSize_full_n,
        lz4OutSize_write,
        input_size_dout,
        input_size_empty_n,
        input_size_read,
        input_size_num_data_valid,
        input_size_fifo_cap
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] lit_outStream_dout;
input   lit_outStream_empty_n;
output   lit_outStream_read;
input  [12:0] lit_outStream_num_data_valid;
input  [12:0] lit_outStream_fifo_cap;
input  [63:0] lenOffset_Stream_dout;
input   lenOffset_Stream_empty_n;
output   lenOffset_Stream_read;
input  [5:0] lenOffset_Stream_num_data_valid;
input  [5:0] lenOffset_Stream_fifo_cap;
output  [7:0] lz4Out_din;
input   lz4Out_full_n;
output   lz4Out_write;
output  [0:0] lz4Out_eos_din;
input   lz4Out_eos_full_n;
output   lz4Out_eos_write;
output  [31:0] lz4OutSize_din;
input   lz4OutSize_full_n;
output   lz4OutSize_write;
input  [31:0] input_size_dout;
input   input_size_empty_n;
output   input_size_read;
input  [2:0] input_size_num_data_valid;
input  [2:0] input_size_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] lz4Out_din;
reg lz4Out_write;
reg[0:0] lz4Out_eos_din;
reg lz4Out_eos_write;
reg lz4OutSize_write;
reg input_size_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    lz4Out_blk_n;
wire    ap_CS_fsm_state4;
reg    lz4Out_eos_blk_n;
reg    lz4OutSize_blk_n;
reg    input_size_blk_n;
reg   [31:0] input_size_3_reg_151;
reg    ap_block_state1;
wire    grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_ap_start;
wire    grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_ap_done;
wire    grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_ap_idle;
wire    grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_ap_ready;
wire    grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lenOffset_Stream_read;
wire    grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lit_outStream_read;
wire   [7:0] grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lz4Out_din;
wire    grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lz4Out_write;
wire   [0:0] grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lz4Out_eos_din;
wire    grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lz4Out_eos_write;
wire   [31:0] grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_compressedSize_out;
wire    grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_compressedSize_out_ap_vld;
reg    grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_ap_start_reg;
reg   [3:0] ap_NS_fsm;
wire    ap_NS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    ap_block_state4;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_ap_start_reg = 1'b0;
end

lz4CompressEngineRun_lz4CompressPart2_Pipeline_lz4_compress grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_ap_start),
    .ap_done(grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_ap_done),
    .ap_idle(grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_ap_idle),
    .ap_ready(grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_ap_ready),
    .lenOffset_Stream_dout(lenOffset_Stream_dout),
    .lenOffset_Stream_empty_n(lenOffset_Stream_empty_n),
    .lenOffset_Stream_read(grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lenOffset_Stream_read),
    .lenOffset_Stream_num_data_valid(6'd0),
    .lenOffset_Stream_fifo_cap(6'd0),
    .lit_outStream_dout(lit_outStream_dout),
    .lit_outStream_empty_n(lit_outStream_empty_n),
    .lit_outStream_read(grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lit_outStream_read),
    .lit_outStream_num_data_valid(13'd0),
    .lit_outStream_fifo_cap(13'd0),
    .lz4Out_din(grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lz4Out_din),
    .lz4Out_full_n(lz4Out_full_n),
    .lz4Out_write(grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lz4Out_write),
    .lz4Out_eos_din(grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lz4Out_eos_din),
    .lz4Out_eos_full_n(lz4Out_eos_full_n),
    .lz4Out_eos_write(grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lz4Out_eos_write),
    .input_size_3(input_size_3_reg_151),
    .compressedSize_out(grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_compressedSize_out),
    .compressedSize_out_ap_vld(grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_compressedSize_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_NS_fsm_state2))) begin
            grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_ap_start_reg <= 1'b1;
        end else if ((grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_ap_ready == 1'b1)) begin
            grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_3_reg_151 <= input_size_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state4)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_blk_n = input_size_empty_n;
    end else begin
        input_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_read = 1'b1;
    end else begin
        input_size_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        lz4OutSize_blk_n = lz4OutSize_full_n;
    end else begin
        lz4OutSize_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        lz4OutSize_write = 1'b1;
    end else begin
        lz4OutSize_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        lz4Out_blk_n = lz4Out_full_n;
    end else begin
        lz4Out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        lz4Out_din = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lz4Out_din = grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lz4Out_din;
    end else begin
        lz4Out_din = grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lz4Out_din;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        lz4Out_eos_blk_n = lz4Out_eos_full_n;
    end else begin
        lz4Out_eos_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        lz4Out_eos_din = 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lz4Out_eos_din = grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lz4Out_eos_din;
    end else begin
        lz4Out_eos_din = grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lz4Out_eos_din;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        lz4Out_eos_write = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lz4Out_eos_write = grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lz4Out_eos_write;
    end else begin
        lz4Out_eos_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        lz4Out_write = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lz4Out_write = grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lz4Out_write;
    end else begin
        lz4Out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_NS_fsm_state2 = ap_NS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (input_size_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state4 = ((lz4OutSize_full_n == 1'b0) | (lz4Out_eos_full_n == 1'b0) | (lz4Out_full_n == 1'b0));
end

assign grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_ap_start = grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_ap_start_reg;

assign lenOffset_Stream_read = grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lenOffset_Stream_read;

assign lit_outStream_read = grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_lit_outStream_read;

assign lz4OutSize_din = grp_lz4CompressPart2_Pipeline_lz4_compress_fu_91_compressedSize_out;

endmodule //lz4CompressEngineRun_lz4CompressPart2
