// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module lz4CompressEngineRun_lz4CompressPart2_Pipeline_lz4_compress (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        lenOffset_Stream_dout,
        lenOffset_Stream_empty_n,
        lenOffset_Stream_read,
        lenOffset_Stream_num_data_valid,
        lenOffset_Stream_fifo_cap,
        lit_outStream_dout,
        lit_outStream_empty_n,
        lit_outStream_read,
        lit_outStream_num_data_valid,
        lit_outStream_fifo_cap,
        lz4Out_din,
        lz4Out_full_n,
        lz4Out_write,
        lz4Out_eos_din,
        lz4Out_eos_full_n,
        lz4Out_eos_write,
        input_size_3,
        compressedSize_out,
        compressedSize_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] lenOffset_Stream_dout;
input   lenOffset_Stream_empty_n;
output   lenOffset_Stream_read;
input  [5:0] lenOffset_Stream_num_data_valid;
input  [5:0] lenOffset_Stream_fifo_cap;
input  [7:0] lit_outStream_dout;
input   lit_outStream_empty_n;
output   lit_outStream_read;
input  [12:0] lit_outStream_num_data_valid;
input  [12:0] lit_outStream_fifo_cap;
output  [7:0] lz4Out_din;
input   lz4Out_full_n;
output   lz4Out_write;
output  [0:0] lz4Out_eos_din;
input   lz4Out_eos_full_n;
output   lz4Out_eos_write;
input  [31:0] input_size_3;
output  [31:0] compressedSize_out;
output   compressedSize_out_ap_vld;

reg ap_idle;
reg lenOffset_Stream_read;
reg lit_outStream_read;
reg lz4Out_write;
reg lz4Out_eos_write;
reg compressedSize_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] or_ln129_fu_332_p2;
reg   [0:0] ap_phi_mux_readOffsetFlag_phi_fu_200_p4;
reg    ap_predicate_op45_read_state2;
wire   [31:0] next_state_load_load_fu_343_p1;
reg    ap_predicate_op73_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] should_write_reg_942;
reg    ap_block_state3_pp0_stage0_iter2_grp1;
reg    ap_block_pp0_stage0_subdone_grp1_done_reg;
reg    ap_block_pp0_stage0_subdone_grp1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_state3_pp0_stage0_iter2_grp2;
reg    ap_block_pp0_stage0_subdone_grp2_done_reg;
reg    ap_block_pp0_stage0_subdone_grp2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    lenOffset_Stream_blk_n;
wire    ap_block_pp0_stage0;
reg    lit_outStream_blk_n;
reg    lz4Out_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    lz4Out_eos_blk_n;
wire    ap_block_pp0_stage0_grp2;
reg   [0:0] readOffsetFlag_reg_196;
reg   [0:0] readOffsetFlag_4_reg_207;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] or_ln129_reg_904;
wire   [7:0] outValue_10_fu_371_p3;
wire   [7:0] outValue_8_fu_446_p1;
wire   [7:0] outValue_6_fu_517_p3;
wire   [7:0] outValue_fu_736_p3;
wire   [0:0] should_write_fu_804_p2;
wire    ap_loop_init;
wire   [0:0] ap_phi_reg_pp0_iter1_readOffsetFlag_4_reg_207;
wire   [0:0] readOffsetFlag_1_fu_487_p2;
wire   [0:0] readOffsetFlag_2_fu_434_p2;
wire   [0:0] readOffsetFlag_3_fu_401_p2;
wire   [7:0] ap_phi_reg_pp0_iter0_outValue_5_reg_232;
reg   [7:0] ap_phi_reg_pp0_iter1_outValue_5_reg_232;
reg    ap_block_pp0_stage0_11001_grp1;
reg   [7:0] ap_phi_reg_pp0_iter2_outValue_5_reg_232;
reg   [31:0] inIdx_fu_116;
wire   [31:0] inIdx_5_fu_627_p3;
reg   [0:0] extra_match_len_fu_120;
wire   [0:0] match_len_ge_15_fu_718_p2;
reg   [0:0] lit_ending_fu_124;
wire   [0:0] lit_ending_3_fu_640_p2;
reg   [15:0] match_offset_plus_one_fu_128;
wire   [15:0] match_offset_plus_one_1_fu_758_p2;
reg   [15:0] write_lit_length_fu_132;
wire   [15:0] write_lit_length_4_fu_455_p2;
wire   [15:0] lit_length_6_fu_557_p4;
reg   [15:0] lit_length_fu_136;
wire   [15:0] lit_length_5_fu_531_p3;
wire   [15:0] lit_length_3_fu_690_p3;
reg   [15:0] match_length_fu_140;
wire   [15:0] match_length_18_fu_385_p3;
wire   [15:0] match_length_16_fu_750_p3;
reg   [31:0] next_state_fu_144;
wire   [31:0] select_ln238_1_fu_393_p3;
wire   [31:0] select_ln232_fu_426_p3;
wire   [31:0] zext_ln218_fu_483_p1;
wire   [31:0] select_ln116_fu_539_p3;
wire   [31:0] zext_ln116_fu_714_p1;
reg   [31:0] compressedSize_fu_148;
wire   [31:0] compressedSize_2_fu_809_p2;
reg   [63:0] nextLenOffsetValue_fu_152;
reg   [63:0] ap_sig_allocacmp_nextLenOffsetValue_2;
reg    ap_block_pp0_stage0_01001_grp1;
reg    ap_block_pp0_stage0_01001_grp2;
reg    ap_block_pp0_stage0_11001_grp2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln129_fu_321_p2;
wire   [0:0] xor_ln129_fu_326_p2;
wire   [0:0] match_len_ge_255_fu_361_p2;
wire   [7:0] trunc_ln236_fu_367_p1;
wire   [15:0] match_length_17_fu_379_p2;
wire   [0:0] icmp_ln218_fu_461_p2;
wire   [2:0] select_ln219_fu_467_p3;
wire   [2:0] next_state_2_fu_475_p3;
wire   [0:0] lit_len_ge_255_fu_507_p2;
wire   [7:0] trunc_ln205_fu_513_p1;
wire   [15:0] lit_length_4_fu_525_p2;
wire   [15:0] match_len_tmp_fu_349_p1;
wire   [16:0] zext_ln153_fu_567_p1;
wire   [16:0] add_ln154_1_fu_575_p2;
wire   [31:0] zext_ln154_fu_581_p1;
wire   [31:0] zext_ln153_1_fu_571_p1;
wire   [31:0] add_ln154_fu_585_p2;
wire   [15:0] match_off_tmp_fu_353_p3;
wire   [0:0] icmp_ln157_fu_597_p2;
wire   [0:0] icmp_ln157_1_fu_603_p2;
wire   [15:0] or_ln158_fu_615_p2;
wire   [0:0] is_special_end_fu_609_p2;
wire   [31:0] inIdx_4_fu_591_p2;
wire   [0:0] is_normal_end_fu_621_p2;
wire   [0:0] or_ln167_fu_634_p2;
wire   [0:0] lit_len_gt_0_fu_652_p2;
wire   [3:0] trunc_ln_fu_658_p4;
wire   [0:0] lit_len_ge_15_fu_646_p2;
wire   [3:0] select_ln174_fu_668_p3;
wire   [15:0] lit_length_2_fu_684_p2;
wire   [2:0] select_ln176_1_fu_698_p3;
wire   [2:0] next_state_1_fu_706_p3;
wire   [3:0] trunc_ln190_fu_724_p1;
wire   [3:0] select_ln173_fu_676_p3;
wire   [3:0] select_ln190_fu_728_p3;
wire   [15:0] add_ln193_fu_744_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_630;
reg    ap_condition_634;
reg    ap_condition_638;
reg    ap_condition_642;
reg    ap_condition_646;
reg    ap_condition_650;
reg    ap_condition_659;
reg    ap_condition_663;
reg    ap_condition_666;
reg    ap_condition_669;
reg    ap_condition_672;
reg    ap_condition_675;
reg    ap_condition_678;
reg    ap_condition_681;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp1_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp2_done_reg = 1'b0;
#0 inIdx_fu_116 = 32'd0;
#0 extra_match_len_fu_120 = 1'd0;
#0 lit_ending_fu_124 = 1'd0;
#0 match_offset_plus_one_fu_128 = 16'd0;
#0 write_lit_length_fu_132 = 16'd0;
#0 lit_length_fu_136 = 16'd0;
#0 match_length_fu_140 = 16'd0;
#0 next_state_fu_144 = 32'd0;
#0 compressedSize_fu_148 = 32'd0;
#0 nextLenOffsetValue_fu_152 = 64'd0;
#0 ap_done_reg = 1'b0;
end

lz4CompressEngineRun_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp1)) begin
            ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp2)) begin
            ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_659)) begin
            ap_phi_reg_pp0_iter2_outValue_5_reg_232 <= 8'd0;
        end else if ((1'b1 == ap_condition_650)) begin
            ap_phi_reg_pp0_iter2_outValue_5_reg_232 <= outValue_10_fu_371_p3;
        end else if ((1'b1 == ap_condition_646)) begin
            ap_phi_reg_pp0_iter2_outValue_5_reg_232 <= {{match_offset_plus_one_fu_128[15:8]}};
        end else if ((1'b1 == ap_condition_642)) begin
            ap_phi_reg_pp0_iter2_outValue_5_reg_232 <= outValue_8_fu_446_p1;
        end else if ((1'b1 == ap_condition_638)) begin
            ap_phi_reg_pp0_iter2_outValue_5_reg_232 <= lit_outStream_dout;
        end else if ((1'b1 == ap_condition_634)) begin
            ap_phi_reg_pp0_iter2_outValue_5_reg_232 <= outValue_6_fu_517_p3;
        end else if ((1'b1 == ap_condition_630)) begin
            ap_phi_reg_pp0_iter2_outValue_5_reg_232 <= outValue_fu_736_p3;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
            ap_phi_reg_pp0_iter2_outValue_5_reg_232 <= ap_phi_reg_pp0_iter1_outValue_5_reg_232;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            compressedSize_fu_148 <= 32'd0;
        end else if ((1'b1 == ap_condition_663)) begin
            compressedSize_fu_148 <= compressedSize_2_fu_809_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            extra_match_len_fu_120 <= 1'd0;
        end else if ((1'b1 == ap_condition_666)) begin
            extra_match_len_fu_120 <= match_len_ge_15_fu_718_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            inIdx_fu_116 <= 32'd0;
        end else if ((1'b1 == ap_condition_666)) begin
            inIdx_fu_116 <= inIdx_5_fu_627_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            lit_ending_fu_124 <= 1'd0;
        end else if ((1'b1 == ap_condition_666)) begin
            lit_ending_fu_124 <= lit_ending_3_fu_640_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            lit_length_fu_136 <= 16'd0;
        end else if ((1'b1 == ap_condition_666)) begin
            lit_length_fu_136 <= lit_length_3_fu_690_p3;
        end else if ((1'b1 == ap_condition_669)) begin
            lit_length_fu_136 <= lit_length_5_fu_531_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            match_length_fu_140 <= 16'd0;
        end else if ((1'b1 == ap_condition_666)) begin
            match_length_fu_140 <= match_length_16_fu_750_p3;
        end else if ((1'b1 == ap_condition_672)) begin
            match_length_fu_140 <= match_length_18_fu_385_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            match_offset_plus_one_fu_128 <= 16'd0;
        end else if ((1'b1 == ap_condition_666)) begin
            match_offset_plus_one_fu_128 <= match_offset_plus_one_1_fu_758_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
                        next_state_fu_144[0] <= 1'b0;
            next_state_fu_144[1] <= 1'b0;
            next_state_fu_144[2] <= 1'b0;
        end else if ((1'b1 == ap_condition_666)) begin
                        next_state_fu_144[2 : 0] <= zext_ln116_fu_714_p1[2 : 0];
        end else if ((1'b1 == ap_condition_669)) begin
                        next_state_fu_144[2 : 0] <= select_ln116_fu_539_p3[2 : 0];
        end else if ((1'b1 == ap_condition_681)) begin
                        next_state_fu_144[2 : 0] <= zext_ln218_fu_483_p1[2 : 0];
        end else if ((1'b1 == ap_condition_678)) begin
                        next_state_fu_144[0] <= 1'b1;
            next_state_fu_144[1] <= 1'b0;
            next_state_fu_144[2] <= 1'b1;
        end else if ((1'b1 == ap_condition_675)) begin
                        next_state_fu_144[2 : 0] <= select_ln232_fu_426_p3[2 : 0];
        end else if ((1'b1 == ap_condition_672)) begin
                        next_state_fu_144[2 : 0] <= select_ln238_1_fu_393_p3[2 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (next_state_load_load_fu_343_p1 == 32'd2) & (or_ln129_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        readOffsetFlag_4_reg_207 <= readOffsetFlag_3_fu_401_p2;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (next_state_load_load_fu_343_p1 == 32'd5) & (or_ln129_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        readOffsetFlag_4_reg_207 <= readOffsetFlag_2_fu_434_p2;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (next_state_fu_144 == 32'd3) & (or_ln129_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        readOffsetFlag_4_reg_207 <= readOffsetFlag_1_fu_487_p2;
    end else if (((~(next_state_fu_144 == 32'd3) & ~(next_state_load_load_fu_343_p1 == 32'd2) & ~(next_state_load_load_fu_343_p1 == 32'd5) & ~(next_state_load_load_fu_343_p1 == 32'd4) & ~(next_state_load_load_fu_343_p1 == 32'd1) & ~(next_state_load_load_fu_343_p1 == 32'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln129_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (next_state_load_load_fu_343_p1 == 32'd4) & (or_ln129_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (next_state_load_load_fu_343_p1 == 32'd1) & (or_ln129_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (next_state_load_load_fu_343_p1 == 32'd0) & (or_ln129_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        readOffsetFlag_4_reg_207 <= 1'd0;
    end else if ((~(or_ln129_fu_332_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        readOffsetFlag_4_reg_207 <= ap_phi_reg_pp0_iter1_readOffsetFlag_4_reg_207;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_ln129_reg_904 == 1'd1))) begin
        readOffsetFlag_reg_196 <= readOffsetFlag_4_reg_207;
    end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        readOffsetFlag_reg_196 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            write_lit_length_fu_132 <= 16'd0;
        end else if ((1'b1 == ap_condition_666)) begin
            write_lit_length_fu_132 <= {{ap_sig_allocacmp_nextLenOffsetValue_2[47:32]}};
        end else if ((1'b1 == ap_condition_681)) begin
            write_lit_length_fu_132 <= write_lit_length_4_fu_455_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_outValue_5_reg_232 <= ap_phi_reg_pp0_iter0_outValue_5_reg_232;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_readOffsetFlag_phi_fu_200_p4 == 1'd1) & (or_ln129_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        nextLenOffsetValue_fu_152 <= lenOffset_Stream_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln129_reg_904 <= or_ln129_fu_332_p2;
        should_write_reg_942 <= should_write_fu_804_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (or_ln129_fu_332_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_ln129_reg_904 == 1'd1))) begin
        ap_phi_mux_readOffsetFlag_phi_fu_200_p4 = readOffsetFlag_4_reg_207;
    end else begin
        ap_phi_mux_readOffsetFlag_phi_fu_200_p4 = readOffsetFlag_reg_196;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_phi_mux_readOffsetFlag_phi_fu_200_p4 == 1'd1) & (or_ln129_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_nextLenOffsetValue_2 = lenOffset_Stream_dout;
    end else begin
        ap_sig_allocacmp_nextLenOffsetValue_2 = nextLenOffsetValue_fu_152;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln129_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1))) begin
        compressedSize_out_ap_vld = 1'b1;
    end else begin
        compressedSize_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op45_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lenOffset_Stream_blk_n = lenOffset_Stream_empty_n;
    end else begin
        lenOffset_Stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op45_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lenOffset_Stream_read = 1'b1;
    end else begin
        lenOffset_Stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op73_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lit_outStream_blk_n = lit_outStream_empty_n;
    end else begin
        lit_outStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op73_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lit_outStream_read = 1'b1;
    end else begin
        lit_outStream_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_grp1) & (should_write_reg_942 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lz4Out_blk_n = lz4Out_full_n;
    end else begin
        lz4Out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b0 == ap_block_pp0_stage0_grp2) & (should_write_reg_942 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lz4Out_eos_blk_n = lz4Out_eos_full_n;
    end else begin
        lz4Out_eos_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp2) & (should_write_reg_942 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lz4Out_eos_write = 1'b1;
    end else begin
        lz4Out_eos_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (should_write_reg_942 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lz4Out_write = 1'b1;
    end else begin
        lz4Out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln154_1_fu_575_p2 = (zext_ln153_fu_567_p1 + 17'd4);

assign add_ln154_fu_585_p2 = (zext_ln154_fu_581_p1 + zext_ln153_1_fu_571_p1);

assign add_ln193_fu_744_p2 = ($signed(match_len_tmp_fu_349_p1) + $signed(16'd65521));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp1)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp2)))));
end

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp1));
end

always @ (*) begin
    ap_block_pp0_stage0_01001_grp2 = ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp2));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp1)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp2)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp2 = ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp2));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp1)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp2)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp1 = ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp2 = ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp2));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ap_predicate_op73_read_state2 == 1'b1) & (lit_outStream_empty_n == 1'b0)) | ((ap_predicate_op45_read_state2 == 1'b1) & (lenOffset_Stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2_grp1 = ((should_write_reg_942 == 1'd1) & (lz4Out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2_grp2 = ((should_write_reg_942 == 1'd1) & (lz4Out_eos_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_630 = ((1'b0 == ap_block_pp0_stage0_11001) & (next_state_load_load_fu_343_p1 == 32'd0) & (or_ln129_fu_332_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_634 = ((1'b0 == ap_block_pp0_stage0_11001) & (next_state_load_load_fu_343_p1 == 32'd1) & (or_ln129_fu_332_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_638 = ((1'b0 == ap_block_pp0_stage0_11001) & (next_state_fu_144 == 32'd3) & (or_ln129_fu_332_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_642 = ((1'b0 == ap_block_pp0_stage0_11001) & (next_state_load_load_fu_343_p1 == 32'd4) & (or_ln129_fu_332_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_646 = ((1'b0 == ap_block_pp0_stage0_11001) & (next_state_load_load_fu_343_p1 == 32'd5) & (or_ln129_fu_332_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_650 = ((1'b0 == ap_block_pp0_stage0_11001) & (next_state_load_load_fu_343_p1 == 32'd2) & (or_ln129_fu_332_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_659 = (~(next_state_fu_144 == 32'd3) & ~(next_state_load_load_fu_343_p1 == 32'd2) & ~(next_state_load_load_fu_343_p1 == 32'd5) & ~(next_state_load_load_fu_343_p1 == 32'd4) & ~(next_state_load_load_fu_343_p1 == 32'd1) & ~(next_state_load_load_fu_343_p1 == 32'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln129_fu_332_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_663 = ((or_ln129_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (should_write_fu_804_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_666 = ((next_state_load_load_fu_343_p1 == 32'd0) & (or_ln129_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_669 = ((next_state_load_load_fu_343_p1 == 32'd1) & (or_ln129_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_672 = ((next_state_load_load_fu_343_p1 == 32'd2) & (or_ln129_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_675 = ((next_state_load_load_fu_343_p1 == 32'd5) & (or_ln129_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_678 = ((next_state_load_load_fu_343_p1 == 32'd4) & (or_ln129_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_681 = ((next_state_fu_144 == 32'd3) & (or_ln129_fu_332_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter0_outValue_5_reg_232 = 'bx;

assign ap_phi_reg_pp0_iter1_readOffsetFlag_4_reg_207 = 'bx;

always @ (*) begin
    ap_predicate_op45_read_state2 = ((ap_phi_mux_readOffsetFlag_phi_fu_200_p4 == 1'd1) & (or_ln129_fu_332_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op73_read_state2 = ((next_state_fu_144 == 32'd3) & (or_ln129_fu_332_p2 == 1'd1));
end

assign ap_ready = ap_ready_sig;

assign compressedSize_2_fu_809_p2 = (compressedSize_fu_148 + 32'd1);

assign compressedSize_out = compressedSize_fu_148;

assign icmp_ln129_fu_321_p2 = ((inIdx_fu_116 < input_size_3) ? 1'b1 : 1'b0);

assign icmp_ln157_1_fu_603_p2 = ((match_off_tmp_fu_353_p3 == 16'd777) ? 1'b1 : 1'b0);

assign icmp_ln157_fu_597_p2 = ((match_len_tmp_fu_349_p1 == 16'd777) ? 1'b1 : 1'b0);

assign icmp_ln218_fu_461_p2 = ((write_lit_length_4_fu_455_p2 == 16'd0) ? 1'b1 : 1'b0);

assign inIdx_4_fu_591_p2 = (add_ln154_fu_585_p2 + inIdx_fu_116);

assign inIdx_5_fu_627_p3 = ((is_special_end_fu_609_p2[0:0] == 1'b1) ? input_size_3 : inIdx_4_fu_591_p2);

assign is_normal_end_fu_621_p2 = ((or_ln158_fu_615_p2 == 16'd0) ? 1'b1 : 1'b0);

assign is_special_end_fu_609_p2 = (icmp_ln157_fu_597_p2 & icmp_ln157_1_fu_603_p2);

assign lit_ending_3_fu_640_p2 = (or_ln167_fu_634_p2 | is_special_end_fu_609_p2);

assign lit_len_ge_15_fu_646_p2 = ((lit_length_6_fu_557_p4 > 16'd14) ? 1'b1 : 1'b0);

assign lit_len_ge_255_fu_507_p2 = ((lit_length_fu_136 > 16'd254) ? 1'b1 : 1'b0);

assign lit_len_gt_0_fu_652_p2 = ((lit_length_6_fu_557_p4 != 16'd0) ? 1'b1 : 1'b0);

assign lit_length_2_fu_684_p2 = ($signed(lit_length_6_fu_557_p4) + $signed(16'd65521));

assign lit_length_3_fu_690_p3 = ((lit_len_ge_15_fu_646_p2[0:0] == 1'b1) ? lit_length_2_fu_684_p2 : 16'd0);

assign lit_length_4_fu_525_p2 = ($signed(lit_length_fu_136) + $signed(16'd65281));

assign lit_length_5_fu_531_p3 = ((lit_len_ge_255_fu_507_p2[0:0] == 1'b1) ? lit_length_4_fu_525_p2 : lit_length_fu_136);

assign lit_length_6_fu_557_p4 = {{ap_sig_allocacmp_nextLenOffsetValue_2[47:32]}};

assign lz4Out_din = ap_phi_reg_pp0_iter2_outValue_5_reg_232;

assign lz4Out_eos_din = 1'd0;

assign match_len_ge_15_fu_718_p2 = ((match_len_tmp_fu_349_p1 > 16'd14) ? 1'b1 : 1'b0);

assign match_len_ge_255_fu_361_p2 = ((match_length_fu_140 > 16'd254) ? 1'b1 : 1'b0);

assign match_len_tmp_fu_349_p1 = ap_sig_allocacmp_nextLenOffsetValue_2[15:0];

assign match_length_16_fu_750_p3 = ((match_len_ge_15_fu_718_p2[0:0] == 1'b1) ? add_ln193_fu_744_p2 : 16'd0);

assign match_length_17_fu_379_p2 = ($signed(match_length_fu_140) + $signed(16'd65281));

assign match_length_18_fu_385_p3 = ((match_len_ge_255_fu_361_p2[0:0] == 1'b1) ? match_length_17_fu_379_p2 : match_length_fu_140);

assign match_off_tmp_fu_353_p3 = {{ap_sig_allocacmp_nextLenOffsetValue_2[31:16]}};

assign match_offset_plus_one_1_fu_758_p2 = (match_off_tmp_fu_353_p3 + 16'd1);

assign next_state_1_fu_706_p3 = ((lit_len_gt_0_fu_652_p2[0:0] == 1'b1) ? select_ln176_1_fu_698_p3 : 3'd4);

assign next_state_2_fu_475_p3 = ((icmp_ln218_fu_461_p2[0:0] == 1'b1) ? select_ln219_fu_467_p3 : 3'd3);

assign next_state_load_load_fu_343_p1 = next_state_fu_144;

assign or_ln129_fu_332_p2 = (xor_ln129_fu_326_p2 | icmp_ln129_fu_321_p2);

assign or_ln158_fu_615_p2 = (match_off_tmp_fu_353_p3 | match_len_tmp_fu_349_p1);

assign or_ln167_fu_634_p2 = (lit_ending_fu_124 | is_normal_end_fu_621_p2);

assign outValue_10_fu_371_p3 = ((match_len_ge_255_fu_361_p2[0:0] == 1'b1) ? 8'd255 : trunc_ln236_fu_367_p1);

assign outValue_6_fu_517_p3 = ((lit_len_ge_255_fu_507_p2[0:0] == 1'b1) ? 8'd255 : trunc_ln205_fu_513_p1);

assign outValue_8_fu_446_p1 = match_offset_plus_one_fu_128[7:0];

assign outValue_fu_736_p3 = {{select_ln173_fu_676_p3}, {select_ln190_fu_728_p3}};

assign readOffsetFlag_1_fu_487_p2 = (lit_ending_fu_124 & icmp_ln218_fu_461_p2);

assign readOffsetFlag_2_fu_434_p2 = (extra_match_len_fu_120 ^ 1'd1);

assign readOffsetFlag_3_fu_401_p2 = (match_len_ge_255_fu_361_p2 ^ 1'd1);

assign select_ln116_fu_539_p3 = ((lit_len_ge_255_fu_507_p2[0:0] == 1'b1) ? 32'd1 : 32'd3);

assign select_ln173_fu_676_p3 = ((lit_len_ge_15_fu_646_p2[0:0] == 1'b1) ? 4'd15 : select_ln174_fu_668_p3);

assign select_ln174_fu_668_p3 = ((lit_len_gt_0_fu_652_p2[0:0] == 1'b1) ? trunc_ln_fu_658_p4 : 4'd0);

assign select_ln176_1_fu_698_p3 = ((lit_len_ge_15_fu_646_p2[0:0] == 1'b1) ? 3'd1 : 3'd3);

assign select_ln190_fu_728_p3 = ((match_len_ge_15_fu_718_p2[0:0] == 1'b1) ? 4'd15 : trunc_ln190_fu_724_p1);

assign select_ln219_fu_467_p3 = ((lit_ending_fu_124[0:0] == 1'b1) ? 3'd0 : 3'd4);

assign select_ln232_fu_426_p3 = ((extra_match_len_fu_120[0:0] == 1'b1) ? 32'd2 : 32'd0);

assign select_ln238_1_fu_393_p3 = ((match_len_ge_255_fu_361_p2[0:0] == 1'b1) ? 32'd2 : 32'd0);

assign should_write_fu_804_p2 = ((compressedSize_fu_148 < input_size_3) ? 1'b1 : 1'b0);

assign trunc_ln190_fu_724_p1 = ap_sig_allocacmp_nextLenOffsetValue_2[3:0];

assign trunc_ln205_fu_513_p1 = lit_length_fu_136[7:0];

assign trunc_ln236_fu_367_p1 = match_length_fu_140[7:0];

assign trunc_ln_fu_658_p4 = {{ap_sig_allocacmp_nextLenOffsetValue_2[35:32]}};

assign write_lit_length_4_fu_455_p2 = ($signed(write_lit_length_fu_132) + $signed(16'd65535));

assign xor_ln129_fu_326_p2 = (ap_phi_mux_readOffsetFlag_phi_fu_200_p4 ^ 1'd1);

assign zext_ln116_fu_714_p1 = next_state_1_fu_706_p3;

assign zext_ln153_1_fu_571_p1 = lit_length_6_fu_557_p4;

assign zext_ln153_fu_567_p1 = match_len_tmp_fu_349_p1;

assign zext_ln154_fu_581_p1 = add_ln154_1_fu_575_p2;

assign zext_ln218_fu_483_p1 = next_state_2_fu_475_p3;

always @ (posedge ap_clk) begin
    next_state_fu_144[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //lz4CompressEngineRun_lz4CompressPart2_Pipeline_lz4_compress
