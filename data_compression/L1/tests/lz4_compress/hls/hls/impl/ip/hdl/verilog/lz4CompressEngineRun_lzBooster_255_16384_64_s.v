// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module lz4CompressEngineRun_lzBooster_255_16384_64_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        bestMatchStream_dout,
        bestMatchStream_empty_n,
        bestMatchStream_read,
        bestMatchStream_num_data_valid,
        bestMatchStream_fifo_cap,
        boosterStream_din,
        boosterStream_full_n,
        boosterStream_write,
        boosterStream_num_data_valid,
        boosterStream_fifo_cap,
        input_size_dout,
        input_size_empty_n,
        input_size_read,
        input_size_num_data_valid,
        input_size_fifo_cap,
        input_size_c_din,
        input_size_c_full_n,
        input_size_c_write,
        input_size_c_num_data_valid,
        input_size_c_fifo_cap
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] bestMatchStream_dout;
input   bestMatchStream_empty_n;
output   bestMatchStream_read;
input  [3:0] bestMatchStream_num_data_valid;
input  [3:0] bestMatchStream_fifo_cap;
output  [31:0] boosterStream_din;
input   boosterStream_full_n;
output   boosterStream_write;
input  [31:0] boosterStream_num_data_valid;
input  [31:0] boosterStream_fifo_cap;
input  [31:0] input_size_dout;
input   input_size_empty_n;
output   input_size_read;
input  [2:0] input_size_num_data_valid;
input  [2:0] input_size_fifo_cap;
output  [31:0] input_size_c_din;
input   input_size_c_full_n;
output   input_size_c_write;
input  [2:0] input_size_c_num_data_valid;
input  [2:0] input_size_c_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg bestMatchStream_read;
reg[31:0] boosterStream_din;
reg boosterStream_write;
reg input_size_read;
reg input_size_c_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    bestMatchStream_blk_n;
wire    ap_CS_fsm_state5;
reg   [0:0] icmp_ln560_reg_182;
wire   [0:0] icmp_ln618_fu_154_p2;
reg    boosterStream_blk_n;
wire    ap_CS_fsm_state4;
reg    input_size_blk_n;
reg    input_size_c_blk_n;
reg   [31:0] input_size_1_reg_177;
reg    ap_block_state1;
wire   [0:0] icmp_ln560_fu_116_p2;
wire   [31:0] sub_fu_127_p2;
reg   [31:0] sub_reg_193;
wire    ap_CS_fsm_state2;
wire    grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_start;
wire    grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_done;
wire    grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_idle;
wire    grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_ready;
wire    grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_bestMatchStream_read;
wire   [31:0] grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_boosterStream_din;
wire    grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_boosterStream_write;
wire   [31:0] grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_outValue_out;
wire    grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_outValue_out_ap_vld;
reg    grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_start_reg;
wire    ap_CS_fsm_state3;
reg   [6:0] i_4_fu_74;
wire   [6:0] i_6_fu_160_p2;
reg    ap_predicate_op32_read_state5;
reg    ap_predicate_op33_write_state5;
reg    ap_block_state5;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_start_reg = 1'b0;
#0 i_4_fu_74 = 7'd0;
end

lz4CompressEngineRun_lzBooster_255_16384_64_Pipeline_lz_booster grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_start),
    .ap_done(grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_done),
    .ap_idle(grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_idle),
    .ap_ready(grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_ready),
    .bestMatchStream_dout(bestMatchStream_dout),
    .bestMatchStream_empty_n(bestMatchStream_empty_n),
    .bestMatchStream_read(grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_bestMatchStream_read),
    .bestMatchStream_num_data_valid(4'd0),
    .bestMatchStream_fifo_cap(4'd0),
    .boosterStream_din(grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_boosterStream_din),
    .boosterStream_full_n(boosterStream_full_n),
    .boosterStream_write(grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_boosterStream_write),
    .boosterStream_num_data_valid(boosterStream_num_data_valid),
    .boosterStream_fifo_cap(boosterStream_fifo_cap),
    .sub(sub_reg_193),
    .outValue_out(grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_outValue_out),
    .outValue_out_ap_vld(grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_outValue_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5) & ((icmp_ln618_fu_154_p2 == 1'd1) | (icmp_ln560_reg_182 == 1'd1)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_start_reg <= 1'b1;
        end else if ((grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_ready == 1'b1)) begin
            grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln560_fu_116_p2 == 1'd0))) begin
        i_4_fu_74 <= 7'd0;
    end else if (((1'b0 == ap_block_state5) & (icmp_ln618_fu_154_p2 == 1'd0) & (icmp_ln560_reg_182 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_4_fu_74 <= i_6_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln560_reg_182 <= icmp_ln560_fu_116_p2;
        input_size_1_reg_177 <= input_size_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sub_reg_193 <= sub_fu_127_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((boosterStream_full_n == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state5)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5) & ((icmp_ln618_fu_154_p2 == 1'd1) | (icmp_ln560_reg_182 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln618_fu_154_p2 == 1'd0) & (icmp_ln560_reg_182 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        bestMatchStream_blk_n = bestMatchStream_empty_n;
    end else begin
        bestMatchStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5) & (ap_predicate_op32_read_state5 == 1'b1))) begin
        bestMatchStream_read = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        bestMatchStream_read = grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_bestMatchStream_read;
    end else begin
        bestMatchStream_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln618_fu_154_p2 == 1'd0) & (icmp_ln560_reg_182 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        boosterStream_blk_n = boosterStream_full_n;
    end else begin
        boosterStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5) & (ap_predicate_op33_write_state5 == 1'b1))) begin
        boosterStream_din = bestMatchStream_dout;
    end else if (((boosterStream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        boosterStream_din = grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_outValue_out;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        boosterStream_din = grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_boosterStream_din;
    end else begin
        boosterStream_din = grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_boosterStream_din;
    end
end

always @ (*) begin
    if ((((boosterStream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5) & (ap_predicate_op33_write_state5 == 1'b1)))) begin
        boosterStream_write = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        boosterStream_write = grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_boosterStream_write;
    end else begin
        boosterStream_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_blk_n = input_size_empty_n;
    end else begin
        input_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_c_blk_n = input_size_c_full_n;
    end else begin
        input_size_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_c_write = 1'b1;
    end else begin
        input_size_c_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_read = 1'b1;
    end else begin
        input_size_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5) & ((icmp_ln618_fu_154_p2 == 1'd1) | (icmp_ln560_reg_182 == 1'd1)))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln560_fu_116_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln560_fu_116_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((boosterStream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5) & ((icmp_ln618_fu_154_p2 == 1'd1) | (icmp_ln560_reg_182 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state5) & (icmp_ln618_fu_154_p2 == 1'd0) & (icmp_ln560_reg_182 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((input_size_c_full_n == 1'b0) | (input_size_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state5 = (((boosterStream_full_n == 1'b0) & (ap_predicate_op33_write_state5 == 1'b1)) | ((bestMatchStream_empty_n == 1'b0) & (ap_predicate_op32_read_state5 == 1'b1)));
end

always @ (*) begin
    ap_predicate_op32_read_state5 = ((icmp_ln618_fu_154_p2 == 1'd0) & (icmp_ln560_reg_182 == 1'd0));
end

always @ (*) begin
    ap_predicate_op33_write_state5 = ((icmp_ln618_fu_154_p2 == 1'd0) & (icmp_ln560_reg_182 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_start = grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_start_reg;

assign i_6_fu_160_p2 = (i_4_fu_74 + 7'd1);

assign icmp_ln560_fu_116_p2 = ((input_size_dout == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln618_fu_154_p2 = ((i_4_fu_74 == 7'd64) ? 1'b1 : 1'b0);

assign input_size_c_din = input_size_dout;

assign start_out = real_start;

assign sub_fu_127_p2 = ($signed(input_size_1_reg_177) + $signed(32'd4294967232));

endmodule //lz4CompressEngineRun_lzBooster_255_16384_64_s
