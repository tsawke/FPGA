-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lz4CompressEngineRun_lzBooster_255_16384_64_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    bestMatchStream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    bestMatchStream_empty_n : IN STD_LOGIC;
    bestMatchStream_read : OUT STD_LOGIC;
    bestMatchStream_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    bestMatchStream_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    boosterStream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    boosterStream_full_n : IN STD_LOGIC;
    boosterStream_write : OUT STD_LOGIC;
    boosterStream_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
    boosterStream_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0);
    input_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    input_size_empty_n : IN STD_LOGIC;
    input_size_read : OUT STD_LOGIC;
    input_size_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    input_size_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    input_size_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_size_c_full_n : IN STD_LOGIC;
    input_size_c_write : OUT STD_LOGIC;
    input_size_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    input_size_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of lz4CompressEngineRun_lzBooster_255_16384_64_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_FFFFFFC0 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal bestMatchStream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln560_reg_182 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln618_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal boosterStream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal input_size_blk_n : STD_LOGIC;
    signal input_size_c_blk_n : STD_LOGIC;
    signal input_size_1_reg_177 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln560_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_fu_127_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_start : STD_LOGIC;
    signal grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_done : STD_LOGIC;
    signal grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_idle : STD_LOGIC;
    signal grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_ready : STD_LOGIC;
    signal grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_bestMatchStream_read : STD_LOGIC;
    signal grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_boosterStream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_boosterStream_write : STD_LOGIC;
    signal grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_outValue_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_outValue_out_ap_vld : STD_LOGIC;
    signal grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_4_fu_74 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal i_6_fu_160_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_predicate_op32_read_state5 : BOOLEAN;
    signal ap_predicate_op33_write_state5 : BOOLEAN;
    signal ap_block_state5 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component lz4CompressEngineRun_lzBooster_255_16384_64_Pipeline_lz_booster IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bestMatchStream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        bestMatchStream_empty_n : IN STD_LOGIC;
        bestMatchStream_read : OUT STD_LOGIC;
        bestMatchStream_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        bestMatchStream_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        boosterStream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        boosterStream_full_n : IN STD_LOGIC;
        boosterStream_write : OUT STD_LOGIC;
        boosterStream_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
        boosterStream_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0);
        sub : IN STD_LOGIC_VECTOR (31 downto 0);
        outValue_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        outValue_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106 : component lz4CompressEngineRun_lzBooster_255_16384_64_Pipeline_lz_booster
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_start,
        ap_done => grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_done,
        ap_idle => grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_idle,
        ap_ready => grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_ready,
        bestMatchStream_dout => bestMatchStream_dout,
        bestMatchStream_empty_n => bestMatchStream_empty_n,
        bestMatchStream_read => grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_bestMatchStream_read,
        bestMatchStream_num_data_valid => ap_const_lv4_0,
        bestMatchStream_fifo_cap => ap_const_lv4_0,
        boosterStream_din => grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_boosterStream_din,
        boosterStream_full_n => boosterStream_full_n,
        boosterStream_write => grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_boosterStream_write,
        boosterStream_num_data_valid => boosterStream_num_data_valid,
        boosterStream_fifo_cap => boosterStream_fifo_cap,
        sub => sub_reg_193,
        outValue_out => grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_outValue_out,
        outValue_out_ap_vld => grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_outValue_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state5) and (ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln618_fu_154_p2 = ap_const_lv1_1) or (icmp_ln560_reg_182 = ap_const_lv1_1)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_ready = ap_const_logic_1)) then 
                    grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_4_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln560_fu_116_p2 = ap_const_lv1_0))) then 
                i_4_fu_74 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_state5) and (icmp_ln618_fu_154_p2 = ap_const_lv1_0) and (icmp_ln560_reg_182 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_4_fu_74 <= i_6_fu_160_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln560_reg_182 <= icmp_ln560_fu_116_p2;
                input_size_1_reg_177 <= input_size_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                sub_reg_193 <= sub_fu_127_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, boosterStream_full_n, ap_CS_fsm_state5, icmp_ln560_reg_182, icmp_ln618_fu_154_p2, ap_CS_fsm_state4, ap_block_state1, icmp_ln560_fu_116_p2, grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_done, ap_CS_fsm_state3, ap_block_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln560_fu_116_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln560_fu_116_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((boosterStream_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5) and (ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln618_fu_154_p2 = ap_const_lv1_1) or (icmp_ln560_reg_182 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_boolean_0 = ap_block_state5) and (icmp_ln618_fu_154_p2 = ap_const_lv1_0) and (icmp_ln560_reg_182 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_done)
    begin
        if ((grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(boosterStream_full_n)
    begin
        if ((boosterStream_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(ap_block_state5)
    begin
        if ((ap_const_boolean_1 = ap_block_state5)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, input_size_empty_n, input_size_c_full_n)
    begin
                ap_block_state1 <= ((input_size_c_full_n = ap_const_logic_0) or (input_size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(bestMatchStream_empty_n, boosterStream_full_n, ap_predicate_op32_read_state5, ap_predicate_op33_write_state5)
    begin
                ap_block_state5 <= (((boosterStream_full_n = ap_const_logic_0) and (ap_predicate_op33_write_state5 = ap_const_boolean_1)) or ((bestMatchStream_empty_n = ap_const_logic_0) and (ap_predicate_op32_read_state5 = ap_const_boolean_1)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5, icmp_ln560_reg_182, icmp_ln618_fu_154_p2, ap_block_state5)
    begin
        if (((ap_const_boolean_0 = ap_block_state5) and (ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln618_fu_154_p2 = ap_const_lv1_1) or (icmp_ln560_reg_182 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op32_read_state5_assign_proc : process(icmp_ln560_reg_182, icmp_ln618_fu_154_p2)
    begin
                ap_predicate_op32_read_state5 <= ((icmp_ln618_fu_154_p2 = ap_const_lv1_0) and (icmp_ln560_reg_182 = ap_const_lv1_0));
    end process;


    ap_predicate_op33_write_state5_assign_proc : process(icmp_ln560_reg_182, icmp_ln618_fu_154_p2)
    begin
                ap_predicate_op33_write_state5 <= ((icmp_ln618_fu_154_p2 = ap_const_lv1_0) and (icmp_ln560_reg_182 = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;

    bestMatchStream_blk_n_assign_proc : process(bestMatchStream_empty_n, ap_CS_fsm_state5, icmp_ln560_reg_182, icmp_ln618_fu_154_p2)
    begin
        if (((icmp_ln618_fu_154_p2 = ap_const_lv1_0) and (icmp_ln560_reg_182 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            bestMatchStream_blk_n <= bestMatchStream_empty_n;
        else 
            bestMatchStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    bestMatchStream_read_assign_proc : process(ap_CS_fsm_state5, grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_bestMatchStream_read, ap_CS_fsm_state3, ap_predicate_op32_read_state5, ap_block_state5)
    begin
        if (((ap_const_boolean_0 = ap_block_state5) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_predicate_op32_read_state5 = ap_const_boolean_1))) then 
            bestMatchStream_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bestMatchStream_read <= grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_bestMatchStream_read;
        else 
            bestMatchStream_read <= ap_const_logic_0;
        end if; 
    end process;


    boosterStream_blk_n_assign_proc : process(boosterStream_full_n, ap_CS_fsm_state5, icmp_ln560_reg_182, icmp_ln618_fu_154_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln618_fu_154_p2 = ap_const_lv1_0) and (icmp_ln560_reg_182 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            boosterStream_blk_n <= boosterStream_full_n;
        else 
            boosterStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    boosterStream_din_assign_proc : process(bestMatchStream_dout, boosterStream_full_n, ap_CS_fsm_state5, ap_CS_fsm_state4, grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_boosterStream_din, grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_outValue_out, ap_CS_fsm_state3, ap_predicate_op33_write_state5, ap_block_state5)
    begin
        if (((ap_const_boolean_0 = ap_block_state5) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_predicate_op33_write_state5 = ap_const_boolean_1))) then 
            boosterStream_din <= bestMatchStream_dout;
        elsif (((boosterStream_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            boosterStream_din <= grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_outValue_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            boosterStream_din <= grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_boosterStream_din;
        else 
            boosterStream_din <= grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_boosterStream_din;
        end if; 
    end process;


    boosterStream_write_assign_proc : process(boosterStream_full_n, ap_CS_fsm_state5, ap_CS_fsm_state4, grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_boosterStream_write, ap_CS_fsm_state3, ap_predicate_op33_write_state5, ap_block_state5)
    begin
        if ((((boosterStream_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_boolean_0 = ap_block_state5) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_predicate_op33_write_state5 = ap_const_boolean_1)))) then 
            boosterStream_write <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            boosterStream_write <= grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_boosterStream_write;
        else 
            boosterStream_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_start <= grp_lzBooster_255_16384_64_Pipeline_lz_booster_fu_106_ap_start_reg;
    i_6_fu_160_p2 <= std_logic_vector(unsigned(i_4_fu_74) + unsigned(ap_const_lv7_1));
    icmp_ln560_fu_116_p2 <= "1" when (input_size_dout = ap_const_lv32_0) else "0";
    icmp_ln618_fu_154_p2 <= "1" when (i_4_fu_74 = ap_const_lv7_40) else "0";

    input_size_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, input_size_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_size_blk_n <= input_size_empty_n;
        else 
            input_size_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_size_c_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, input_size_c_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_size_c_blk_n <= input_size_c_full_n;
        else 
            input_size_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_size_c_din <= input_size_dout;

    input_size_c_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_size_c_write <= ap_const_logic_1;
        else 
            input_size_c_write <= ap_const_logic_0;
        end if; 
    end process;


    input_size_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_size_read <= ap_const_logic_1;
        else 
            input_size_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln560_reg_182, icmp_ln618_fu_154_p2, ap_block_state5)
    begin
        if (((ap_const_boolean_0 = ap_block_state5) and (ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln618_fu_154_p2 = ap_const_lv1_1) or (icmp_ln560_reg_182 = ap_const_lv1_1)))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_fu_127_p2 <= std_logic_vector(unsigned(input_size_1_reg_177) + unsigned(ap_const_lv32_FFFFFFC0));
end behav;
