-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lz4CompressEngineRun_lz4Compress_4096_1_s is
port (
    boosterStream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    boosterStream_empty_n : IN STD_LOGIC;
    boosterStream_read : OUT STD_LOGIC;
    lz4Out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    lz4Out_full_n : IN STD_LOGIC;
    lz4Out_write : OUT STD_LOGIC;
    max_lit_limit : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    input_size_empty_n : IN STD_LOGIC;
    input_size_read : OUT STD_LOGIC;
    lz4Out_eos_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    lz4Out_eos_full_n : IN STD_LOGIC;
    lz4Out_eos_write : OUT STD_LOGIC;
    lz4OutSize_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    lz4OutSize_full_n : IN STD_LOGIC;
    lz4OutSize_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    max_lit_limit_ap_vld : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of lz4CompressEngineRun_lz4Compress_4096_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal lz4CompressPart1_4096_1_U0_ap_start : STD_LOGIC;
    signal lz4CompressPart1_4096_1_U0_ap_done : STD_LOGIC;
    signal lz4CompressPart1_4096_1_U0_ap_continue : STD_LOGIC;
    signal lz4CompressPart1_4096_1_U0_ap_idle : STD_LOGIC;
    signal lz4CompressPart1_4096_1_U0_ap_ready : STD_LOGIC;
    signal lz4CompressPart1_4096_1_U0_start_out : STD_LOGIC;
    signal lz4CompressPart1_4096_1_U0_start_write : STD_LOGIC;
    signal lz4CompressPart1_4096_1_U0_boosterStream_read : STD_LOGIC;
    signal lz4CompressPart1_4096_1_U0_lit_outStream_din : STD_LOGIC_VECTOR (7 downto 0);
    signal lz4CompressPart1_4096_1_U0_lit_outStream_write : STD_LOGIC;
    signal lz4CompressPart1_4096_1_U0_lenOffset_Stream_din : STD_LOGIC_VECTOR (63 downto 0);
    signal lz4CompressPart1_4096_1_U0_lenOffset_Stream_write : STD_LOGIC;
    signal lz4CompressPart1_4096_1_U0_input_size_read : STD_LOGIC;
    signal lz4CompressPart1_4096_1_U0_max_lit_limit : STD_LOGIC_VECTOR (31 downto 0);
    signal lz4CompressPart1_4096_1_U0_max_lit_limit_ap_vld : STD_LOGIC;
    signal lz4CompressPart1_4096_1_U0_input_size_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal lz4CompressPart1_4096_1_U0_input_size_c_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal lz4CompressPart2_U0_ap_start : STD_LOGIC;
    signal lz4CompressPart2_U0_ap_done : STD_LOGIC;
    signal lz4CompressPart2_U0_ap_continue : STD_LOGIC;
    signal lz4CompressPart2_U0_ap_idle : STD_LOGIC;
    signal lz4CompressPart2_U0_ap_ready : STD_LOGIC;
    signal lz4CompressPart2_U0_lit_outStream_read : STD_LOGIC;
    signal lz4CompressPart2_U0_lenOffset_Stream_read : STD_LOGIC;
    signal lz4CompressPart2_U0_lz4Out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal lz4CompressPart2_U0_lz4Out_write : STD_LOGIC;
    signal lz4CompressPart2_U0_lz4Out_eos_din : STD_LOGIC_VECTOR (0 downto 0);
    signal lz4CompressPart2_U0_lz4Out_eos_write : STD_LOGIC;
    signal lz4CompressPart2_U0_lz4OutSize_din : STD_LOGIC_VECTOR (31 downto 0);
    signal lz4CompressPart2_U0_lz4OutSize_write : STD_LOGIC;
    signal lz4CompressPart2_U0_input_size_read : STD_LOGIC;
    signal lit_outStream_full_n : STD_LOGIC;
    signal lit_outStream_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal lit_outStream_empty_n : STD_LOGIC;
    signal lit_outStream_num_data_valid : STD_LOGIC_VECTOR (12 downto 0);
    signal lit_outStream_fifo_cap : STD_LOGIC_VECTOR (12 downto 0);
    signal lenOffset_Stream_full_n : STD_LOGIC;
    signal lenOffset_Stream_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal lenOffset_Stream_empty_n : STD_LOGIC;
    signal lenOffset_Stream_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal lenOffset_Stream_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal input_size_c_full_n : STD_LOGIC;
    signal input_size_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal input_size_c_empty_n : STD_LOGIC;
    signal input_size_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal input_size_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sync_done : STD_LOGIC;
    signal start_for_lz4CompressPart2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_lz4CompressPart2_U0_full_n : STD_LOGIC;
    signal start_for_lz4CompressPart2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_lz4CompressPart2_U0_empty_n : STD_LOGIC;

    component lz4CompressEngineRun_lz4CompressPart1_4096_1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        boosterStream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        boosterStream_empty_n : IN STD_LOGIC;
        boosterStream_read : OUT STD_LOGIC;
        boosterStream_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        boosterStream_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        lit_outStream_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        lit_outStream_full_n : IN STD_LOGIC;
        lit_outStream_write : OUT STD_LOGIC;
        lit_outStream_num_data_valid : IN STD_LOGIC_VECTOR (12 downto 0);
        lit_outStream_fifo_cap : IN STD_LOGIC_VECTOR (12 downto 0);
        lenOffset_Stream_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        lenOffset_Stream_full_n : IN STD_LOGIC;
        lenOffset_Stream_write : OUT STD_LOGIC;
        lenOffset_Stream_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        lenOffset_Stream_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        input_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        input_size_empty_n : IN STD_LOGIC;
        input_size_read : OUT STD_LOGIC;
        input_size_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        input_size_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        max_lit_limit : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_lit_limit_ap_vld : OUT STD_LOGIC;
        input_size_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_size_c_full_n : IN STD_LOGIC;
        input_size_c_write : OUT STD_LOGIC;
        input_size_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        input_size_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component lz4CompressEngineRun_lz4CompressPart2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        lit_outStream_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        lit_outStream_empty_n : IN STD_LOGIC;
        lit_outStream_read : OUT STD_LOGIC;
        lit_outStream_num_data_valid : IN STD_LOGIC_VECTOR (12 downto 0);
        lit_outStream_fifo_cap : IN STD_LOGIC_VECTOR (12 downto 0);
        lenOffset_Stream_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        lenOffset_Stream_empty_n : IN STD_LOGIC;
        lenOffset_Stream_read : OUT STD_LOGIC;
        lenOffset_Stream_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        lenOffset_Stream_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        lz4Out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        lz4Out_full_n : IN STD_LOGIC;
        lz4Out_write : OUT STD_LOGIC;
        lz4Out_eos_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        lz4Out_eos_full_n : IN STD_LOGIC;
        lz4Out_eos_write : OUT STD_LOGIC;
        lz4OutSize_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        lz4OutSize_full_n : IN STD_LOGIC;
        lz4OutSize_write : OUT STD_LOGIC;
        input_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        input_size_empty_n : IN STD_LOGIC;
        input_size_read : OUT STD_LOGIC;
        input_size_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        input_size_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component lz4CompressEngineRun_fifo_w8_d4096_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC;
        if_num_data_valid : OUT STD_LOGIC_VECTOR (12 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component lz4CompressEngineRun_fifo_w64_d32_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC;
        if_num_data_valid : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component lz4CompressEngineRun_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC;
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component lz4CompressEngineRun_start_for_lz4CompressPart2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    lz4CompressPart1_4096_1_U0 : component lz4CompressEngineRun_lz4CompressPart1_4096_1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => lz4CompressPart1_4096_1_U0_ap_start,
        start_full_n => start_for_lz4CompressPart2_U0_full_n,
        ap_done => lz4CompressPart1_4096_1_U0_ap_done,
        ap_continue => lz4CompressPart1_4096_1_U0_ap_continue,
        ap_idle => lz4CompressPart1_4096_1_U0_ap_idle,
        ap_ready => lz4CompressPart1_4096_1_U0_ap_ready,
        start_out => lz4CompressPart1_4096_1_U0_start_out,
        start_write => lz4CompressPart1_4096_1_U0_start_write,
        boosterStream_dout => boosterStream_dout,
        boosterStream_empty_n => boosterStream_empty_n,
        boosterStream_read => lz4CompressPart1_4096_1_U0_boosterStream_read,
        boosterStream_num_data_valid => ap_const_lv4_0,
        boosterStream_fifo_cap => ap_const_lv4_0,
        lit_outStream_din => lz4CompressPart1_4096_1_U0_lit_outStream_din,
        lit_outStream_full_n => lit_outStream_full_n,
        lit_outStream_write => lz4CompressPart1_4096_1_U0_lit_outStream_write,
        lit_outStream_num_data_valid => lit_outStream_num_data_valid,
        lit_outStream_fifo_cap => lit_outStream_fifo_cap,
        lenOffset_Stream_din => lz4CompressPart1_4096_1_U0_lenOffset_Stream_din,
        lenOffset_Stream_full_n => lenOffset_Stream_full_n,
        lenOffset_Stream_write => lz4CompressPart1_4096_1_U0_lenOffset_Stream_write,
        lenOffset_Stream_num_data_valid => lenOffset_Stream_num_data_valid,
        lenOffset_Stream_fifo_cap => lenOffset_Stream_fifo_cap,
        input_size_dout => input_size_dout,
        input_size_empty_n => input_size_empty_n,
        input_size_read => lz4CompressPart1_4096_1_U0_input_size_read,
        input_size_num_data_valid => ap_const_lv3_0,
        input_size_fifo_cap => ap_const_lv3_0,
        max_lit_limit => lz4CompressPart1_4096_1_U0_max_lit_limit,
        max_lit_limit_ap_vld => lz4CompressPart1_4096_1_U0_max_lit_limit_ap_vld,
        input_size_c_din => lz4CompressPart1_4096_1_U0_input_size_c_din,
        input_size_c_full_n => input_size_c_full_n,
        input_size_c_write => lz4CompressPart1_4096_1_U0_input_size_c_write,
        input_size_c_num_data_valid => input_size_c_num_data_valid,
        input_size_c_fifo_cap => input_size_c_fifo_cap);

    lz4CompressPart2_U0 : component lz4CompressEngineRun_lz4CompressPart2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => lz4CompressPart2_U0_ap_start,
        ap_done => lz4CompressPart2_U0_ap_done,
        ap_continue => lz4CompressPart2_U0_ap_continue,
        ap_idle => lz4CompressPart2_U0_ap_idle,
        ap_ready => lz4CompressPart2_U0_ap_ready,
        lit_outStream_dout => lit_outStream_dout,
        lit_outStream_empty_n => lit_outStream_empty_n,
        lit_outStream_read => lz4CompressPart2_U0_lit_outStream_read,
        lit_outStream_num_data_valid => lit_outStream_num_data_valid,
        lit_outStream_fifo_cap => lit_outStream_fifo_cap,
        lenOffset_Stream_dout => lenOffset_Stream_dout,
        lenOffset_Stream_empty_n => lenOffset_Stream_empty_n,
        lenOffset_Stream_read => lz4CompressPart2_U0_lenOffset_Stream_read,
        lenOffset_Stream_num_data_valid => lenOffset_Stream_num_data_valid,
        lenOffset_Stream_fifo_cap => lenOffset_Stream_fifo_cap,
        lz4Out_din => lz4CompressPart2_U0_lz4Out_din,
        lz4Out_full_n => lz4Out_full_n,
        lz4Out_write => lz4CompressPart2_U0_lz4Out_write,
        lz4Out_eos_din => lz4CompressPart2_U0_lz4Out_eos_din,
        lz4Out_eos_full_n => lz4Out_eos_full_n,
        lz4Out_eos_write => lz4CompressPart2_U0_lz4Out_eos_write,
        lz4OutSize_din => lz4CompressPart2_U0_lz4OutSize_din,
        lz4OutSize_full_n => lz4OutSize_full_n,
        lz4OutSize_write => lz4CompressPart2_U0_lz4OutSize_write,
        input_size_dout => input_size_c_dout,
        input_size_empty_n => input_size_c_empty_n,
        input_size_read => lz4CompressPart2_U0_input_size_read,
        input_size_num_data_valid => input_size_c_num_data_valid,
        input_size_fifo_cap => input_size_c_fifo_cap);

    lit_outStream_U : component lz4CompressEngineRun_fifo_w8_d4096_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => lz4CompressPart1_4096_1_U0_lit_outStream_din,
        if_full_n => lit_outStream_full_n,
        if_write => lz4CompressPart1_4096_1_U0_lit_outStream_write,
        if_dout => lit_outStream_dout,
        if_empty_n => lit_outStream_empty_n,
        if_read => lz4CompressPart2_U0_lit_outStream_read,
        if_num_data_valid => lit_outStream_num_data_valid,
        if_fifo_cap => lit_outStream_fifo_cap);

    lenOffset_Stream_U : component lz4CompressEngineRun_fifo_w64_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => lz4CompressPart1_4096_1_U0_lenOffset_Stream_din,
        if_full_n => lenOffset_Stream_full_n,
        if_write => lz4CompressPart1_4096_1_U0_lenOffset_Stream_write,
        if_dout => lenOffset_Stream_dout,
        if_empty_n => lenOffset_Stream_empty_n,
        if_read => lz4CompressPart2_U0_lenOffset_Stream_read,
        if_num_data_valid => lenOffset_Stream_num_data_valid,
        if_fifo_cap => lenOffset_Stream_fifo_cap);

    input_size_c_U : component lz4CompressEngineRun_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => lz4CompressPart1_4096_1_U0_input_size_c_din,
        if_full_n => input_size_c_full_n,
        if_write => lz4CompressPart1_4096_1_U0_input_size_c_write,
        if_dout => input_size_c_dout,
        if_empty_n => input_size_c_empty_n,
        if_read => lz4CompressPart2_U0_input_size_read,
        if_num_data_valid => input_size_c_num_data_valid,
        if_fifo_cap => input_size_c_fifo_cap);

    start_for_lz4CompressPart2_U0_U : component lz4CompressEngineRun_start_for_lz4CompressPart2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_lz4CompressPart2_U0_din,
        if_full_n => start_for_lz4CompressPart2_U0_full_n,
        if_write => lz4CompressPart1_4096_1_U0_start_write,
        if_dout => start_for_lz4CompressPart2_U0_dout,
        if_empty_n => start_for_lz4CompressPart2_U0_empty_n,
        if_read => lz4CompressPart2_U0_ap_ready);




    ap_done <= ap_sync_done;
    ap_idle <= (lz4CompressPart2_U0_ap_idle and lz4CompressPart1_4096_1_U0_ap_idle);
    ap_ready <= lz4CompressPart1_4096_1_U0_ap_ready;
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (lz4CompressPart2_U0_ap_done and lz4CompressPart1_4096_1_U0_ap_done);
    boosterStream_read <= lz4CompressPart1_4096_1_U0_boosterStream_read;
    input_size_read <= lz4CompressPart1_4096_1_U0_input_size_read;
    lz4CompressPart1_4096_1_U0_ap_continue <= ap_sync_continue;
    lz4CompressPart1_4096_1_U0_ap_start <= ap_start;
    lz4CompressPart2_U0_ap_continue <= ap_sync_continue;
    lz4CompressPart2_U0_ap_start <= start_for_lz4CompressPart2_U0_empty_n;
    lz4OutSize_din <= lz4CompressPart2_U0_lz4OutSize_din;
    lz4OutSize_write <= lz4CompressPart2_U0_lz4OutSize_write;
    lz4Out_din <= lz4CompressPart2_U0_lz4Out_din;
    lz4Out_eos_din <= lz4CompressPart2_U0_lz4Out_eos_din;
    lz4Out_eos_write <= lz4CompressPart2_U0_lz4Out_eos_write;
    lz4Out_write <= lz4CompressPart2_U0_lz4Out_write;
    max_lit_limit <= lz4CompressPart1_4096_1_U0_max_lit_limit;
    max_lit_limit_ap_vld <= lz4CompressPart1_4096_1_U0_max_lit_limit_ap_vld;
    start_for_lz4CompressPart2_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
