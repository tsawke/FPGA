// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module lz4CompressEngineRun_lz4CompressPart1_4096_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        boosterStream_dout,
        boosterStream_empty_n,
        boosterStream_read,
        boosterStream_num_data_valid,
        boosterStream_fifo_cap,
        lit_outStream_din,
        lit_outStream_full_n,
        lit_outStream_write,
        lit_outStream_num_data_valid,
        lit_outStream_fifo_cap,
        lenOffset_Stream_din,
        lenOffset_Stream_full_n,
        lenOffset_Stream_write,
        lenOffset_Stream_num_data_valid,
        lenOffset_Stream_fifo_cap,
        input_size_dout,
        input_size_empty_n,
        input_size_read,
        input_size_num_data_valid,
        input_size_fifo_cap,
        max_lit_limit,
        max_lit_limit_ap_vld,
        input_size_c_din,
        input_size_c_full_n,
        input_size_c_write,
        input_size_c_num_data_valid,
        input_size_c_fifo_cap
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] boosterStream_dout;
input   boosterStream_empty_n;
output   boosterStream_read;
input  [3:0] boosterStream_num_data_valid;
input  [3:0] boosterStream_fifo_cap;
output  [7:0] lit_outStream_din;
input   lit_outStream_full_n;
output   lit_outStream_write;
input  [12:0] lit_outStream_num_data_valid;
input  [12:0] lit_outStream_fifo_cap;
output  [63:0] lenOffset_Stream_din;
input   lenOffset_Stream_full_n;
output   lenOffset_Stream_write;
input  [5:0] lenOffset_Stream_num_data_valid;
input  [5:0] lenOffset_Stream_fifo_cap;
input  [31:0] input_size_dout;
input   input_size_empty_n;
output   input_size_read;
input  [2:0] input_size_num_data_valid;
input  [2:0] input_size_fifo_cap;
output  [31:0] max_lit_limit;
output   max_lit_limit_ap_vld;
output  [31:0] input_size_c_din;
input   input_size_c_full_n;
output   input_size_c_write;
input  [2:0] input_size_c_num_data_valid;
input  [2:0] input_size_c_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg boosterStream_read;
reg[63:0] lenOffset_Stream_din;
reg lenOffset_Stream_write;
reg input_size_read;
reg[31:0] max_lit_limit;
reg max_lit_limit_ap_vld;
reg input_size_c_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    boosterStream_blk_n;
wire   [0:0] icmp_ln51_fu_153_p2;
reg    lenOffset_Stream_blk_n;
wire    ap_CS_fsm_state4;
reg   [0:0] icmp_ln51_reg_232;
wire   [31:0] lit_count_loc_load_load_fu_197_p1;
reg    input_size_blk_n;
reg    input_size_c_blk_n;
reg   [31:0] input_size_4_reg_226;
reg    ap_block_state1;
reg   [31:0] boosterStream_read_reg_236;
wire   [31:0] sub_fu_159_p2;
reg   [31:0] sub_reg_241;
wire    ap_CS_fsm_state2;
wire    grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_ap_start;
wire    grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_ap_done;
wire    grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_ap_idle;
wire    grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_ap_ready;
wire    grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_boosterStream_read;
wire   [7:0] grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_outStream_din;
wire    grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_outStream_write;
wire   [63:0] grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lenOffset_Stream_din;
wire    grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lenOffset_Stream_write;
wire   [31:0] grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_count_out;
wire    grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_count_out_ap_vld;
wire   [31:0] grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_count_flag_out;
wire    grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_count_flag_out_ap_vld;
wire   [63:0] tmpValue_fu_205_p3;
reg   [63:0] ap_phi_mux_tmpValue_1_phi_fu_109_p4;
reg    ap_predicate_op31_write_state4;
reg    ap_block_state4;
reg   [31:0] ap_phi_mux_lit_count_flag_phi_fu_120_p4;
reg   [31:0] ap_phi_mux_lit_count_flag_1_phi_fu_130_p4;
reg    grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_ap_start_reg;
wire    ap_CS_fsm_state3;
reg   [31:0] max_lit_limit_preg;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_ap_start_reg = 1'b0;
#0 max_lit_limit_preg = 32'd0;
end

lz4CompressEngineRun_lz4CompressPart1_4096_1_Pipeline_lz4_divide grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_ap_start),
    .ap_done(grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_ap_done),
    .ap_idle(grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_ap_idle),
    .ap_ready(grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_ap_ready),
    .boosterStream_dout(boosterStream_dout),
    .boosterStream_empty_n(boosterStream_empty_n),
    .boosterStream_read(grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_boosterStream_read),
    .boosterStream_num_data_valid(4'd0),
    .boosterStream_fifo_cap(4'd0),
    .lit_outStream_din(grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_outStream_din),
    .lit_outStream_full_n(lit_outStream_full_n),
    .lit_outStream_write(grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_outStream_write),
    .lit_outStream_num_data_valid(13'd0),
    .lit_outStream_fifo_cap(13'd0),
    .lenOffset_Stream_din(grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lenOffset_Stream_din),
    .lenOffset_Stream_full_n(lenOffset_Stream_full_n),
    .lenOffset_Stream_write(grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lenOffset_Stream_write),
    .lenOffset_Stream_num_data_valid(6'd0),
    .lenOffset_Stream_fifo_cap(6'd0),
    .empty(boosterStream_read_reg_236),
    .input_size_4(input_size_4_reg_226),
    .sub(sub_reg_241),
    .lit_count_out(grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_count_out),
    .lit_count_out_ap_vld(grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_count_out_ap_vld),
    .lit_count_flag_out(grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_count_flag_out),
    .lit_count_flag_out_ap_vld(grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_count_flag_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_ap_start_reg <= 1'b1;
        end else if ((grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_ap_ready == 1'b1)) begin
            grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        max_lit_limit_preg <= 32'd0;
    end else begin
        if (((icmp_ln51_reg_232 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4))) begin
            max_lit_limit_preg <= ap_phi_mux_lit_count_flag_1_phi_fu_130_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        boosterStream_read_reg_236 <= boosterStream_dout;
        icmp_ln51_reg_232 <= icmp_ln51_fu_153_p2;
        input_size_4_reg_226 <= input_size_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sub_reg_241 <= sub_fu_159_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state4)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln51_reg_232 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        if (~(grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_count_out == 32'd0)) begin
            ap_phi_mux_lit_count_flag_1_phi_fu_130_p4 = ap_phi_mux_lit_count_flag_phi_fu_120_p4;
        end else if ((grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_count_out == 32'd0)) begin
            ap_phi_mux_lit_count_flag_1_phi_fu_130_p4 = grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_count_flag_out;
        end else begin
            ap_phi_mux_lit_count_flag_1_phi_fu_130_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_lit_count_flag_1_phi_fu_130_p4 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln51_reg_232 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        if ((lit_count_loc_load_load_fu_197_p1 == 32'd4096)) begin
            ap_phi_mux_lit_count_flag_phi_fu_120_p4 = 32'd1;
        end else if ((~(grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_count_out == 32'd0) & ~(lit_count_loc_load_load_fu_197_p1 == 32'd4096))) begin
            ap_phi_mux_lit_count_flag_phi_fu_120_p4 = grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_count_flag_out;
        end else begin
            ap_phi_mux_lit_count_flag_phi_fu_120_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_lit_count_flag_phi_fu_120_p4 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln51_reg_232 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        if ((lit_count_loc_load_load_fu_197_p1 == 32'd4096)) begin
            ap_phi_mux_tmpValue_1_phi_fu_109_p4 = 64'd17592236966665;
        end else if ((~(grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_count_out == 32'd0) & ~(lit_count_loc_load_load_fu_197_p1 == 32'd4096))) begin
            ap_phi_mux_tmpValue_1_phi_fu_109_p4 = tmpValue_fu_205_p3;
        end else begin
            ap_phi_mux_tmpValue_1_phi_fu_109_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_tmpValue_1_phi_fu_109_p4 = 'bx;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (icmp_ln51_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        boosterStream_blk_n = boosterStream_empty_n;
    end else begin
        boosterStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln51_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        boosterStream_read = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        boosterStream_read = grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_boosterStream_read;
    end else begin
        boosterStream_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_blk_n = input_size_empty_n;
    end else begin
        input_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_c_blk_n = input_size_c_full_n;
    end else begin
        input_size_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        input_size_c_write = 1'b1;
    end else begin
        input_size_c_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        input_size_read = 1'b1;
    end else begin
        input_size_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~(grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_count_out == 32'd0) & (icmp_ln51_reg_232 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        lenOffset_Stream_blk_n = lenOffset_Stream_full_n;
    end else begin
        lenOffset_Stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_predicate_op31_write_state4 == 1'b1) & (1'b0 == ap_block_state4))) begin
        lenOffset_Stream_din = ap_phi_mux_tmpValue_1_phi_fu_109_p4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lenOffset_Stream_din = grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lenOffset_Stream_din;
    end else begin
        lenOffset_Stream_din = grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lenOffset_Stream_din;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_predicate_op31_write_state4 == 1'b1) & (1'b0 == ap_block_state4))) begin
        lenOffset_Stream_write = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lenOffset_Stream_write = grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lenOffset_Stream_write;
    end else begin
        lenOffset_Stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln51_reg_232 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4))) begin
        max_lit_limit = ap_phi_mux_lit_count_flag_1_phi_fu_130_p4;
    end else begin
        max_lit_limit = max_lit_limit_preg;
    end
end

always @ (*) begin
    if (((icmp_ln51_reg_232 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4))) begin
        max_lit_limit_ap_vld = 1'b1;
    end else begin
        max_lit_limit_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln51_fu_153_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((icmp_ln51_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((input_size_c_full_n == 1'b0) | (input_size_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0) | ((icmp_ln51_fu_153_p2 == 1'd0) & (boosterStream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4 = ((lenOffset_Stream_full_n == 1'b0) & (ap_predicate_op31_write_state4 == 1'b1));
end

always @ (*) begin
    ap_predicate_op31_write_state4 = (~(grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_count_out == 32'd0) & (icmp_ln51_reg_232 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_ap_start = grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_ap_start_reg;

assign icmp_ln51_fu_153_p2 = ((input_size_dout == 32'd0) ? 1'b1 : 1'b0);

assign input_size_c_din = input_size_dout;

assign lit_count_loc_load_load_fu_197_p1 = grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_count_out;

assign lit_outStream_din = grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_outStream_din;

assign lit_outStream_write = grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_outStream_write;

assign start_out = real_start;

assign sub_fu_159_p2 = ($signed(input_size_4_reg_226) + $signed(32'd4294967295));

assign tmpValue_fu_205_p3 = {{grp_lz4CompressPart1_4096_1_Pipeline_lz4_divide_fu_138_lit_count_out}, {32'd0}};

endmodule //lz4CompressEngineRun_lz4CompressPart1_4096_1_s
