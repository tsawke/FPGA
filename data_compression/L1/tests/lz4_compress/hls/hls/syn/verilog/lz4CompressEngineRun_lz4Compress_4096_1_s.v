// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module lz4CompressEngineRun_lz4Compress_4096_1_s (
        boosterStream_dout,
        boosterStream_empty_n,
        boosterStream_read,
        lz4Out_din,
        lz4Out_full_n,
        lz4Out_write,
        max_lit_limit,
        input_size_dout,
        input_size_empty_n,
        input_size_read,
        lz4Out_eos_din,
        lz4Out_eos_full_n,
        lz4Out_eos_write,
        lz4OutSize_din,
        lz4OutSize_full_n,
        lz4OutSize_write,
        ap_clk,
        ap_rst,
        max_lit_limit_ap_vld,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] boosterStream_dout;
input   boosterStream_empty_n;
output   boosterStream_read;
output  [7:0] lz4Out_din;
input   lz4Out_full_n;
output   lz4Out_write;
output  [31:0] max_lit_limit;
input  [31:0] input_size_dout;
input   input_size_empty_n;
output   input_size_read;
output  [0:0] lz4Out_eos_din;
input   lz4Out_eos_full_n;
output   lz4Out_eos_write;
output  [31:0] lz4OutSize_din;
input   lz4OutSize_full_n;
output   lz4OutSize_write;
input   ap_clk;
input   ap_rst;
output   max_lit_limit_ap_vld;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    lz4CompressPart1_4096_1_U0_ap_start;
wire    lz4CompressPart1_4096_1_U0_ap_done;
wire    lz4CompressPart1_4096_1_U0_ap_continue;
wire    lz4CompressPart1_4096_1_U0_ap_idle;
wire    lz4CompressPart1_4096_1_U0_ap_ready;
wire    lz4CompressPart1_4096_1_U0_start_out;
wire    lz4CompressPart1_4096_1_U0_start_write;
wire    lz4CompressPart1_4096_1_U0_boosterStream_read;
wire   [7:0] lz4CompressPart1_4096_1_U0_lit_outStream_din;
wire    lz4CompressPart1_4096_1_U0_lit_outStream_write;
wire   [63:0] lz4CompressPart1_4096_1_U0_lenOffset_Stream_din;
wire    lz4CompressPart1_4096_1_U0_lenOffset_Stream_write;
wire    lz4CompressPart1_4096_1_U0_input_size_read;
wire   [31:0] lz4CompressPart1_4096_1_U0_max_lit_limit;
wire    lz4CompressPart1_4096_1_U0_max_lit_limit_ap_vld;
wire   [31:0] lz4CompressPart1_4096_1_U0_input_size_c_din;
wire    lz4CompressPart1_4096_1_U0_input_size_c_write;
wire    ap_sync_continue;
wire    lz4CompressPart2_U0_ap_start;
wire    lz4CompressPart2_U0_ap_done;
wire    lz4CompressPart2_U0_ap_continue;
wire    lz4CompressPart2_U0_ap_idle;
wire    lz4CompressPart2_U0_ap_ready;
wire    lz4CompressPart2_U0_lit_outStream_read;
wire    lz4CompressPart2_U0_lenOffset_Stream_read;
wire   [7:0] lz4CompressPart2_U0_lz4Out_din;
wire    lz4CompressPart2_U0_lz4Out_write;
wire   [0:0] lz4CompressPart2_U0_lz4Out_eos_din;
wire    lz4CompressPart2_U0_lz4Out_eos_write;
wire   [31:0] lz4CompressPart2_U0_lz4OutSize_din;
wire    lz4CompressPart2_U0_lz4OutSize_write;
wire    lz4CompressPart2_U0_input_size_read;
wire    lit_outStream_full_n;
wire   [7:0] lit_outStream_dout;
wire    lit_outStream_empty_n;
wire   [12:0] lit_outStream_num_data_valid;
wire   [12:0] lit_outStream_fifo_cap;
wire    lenOffset_Stream_full_n;
wire   [63:0] lenOffset_Stream_dout;
wire    lenOffset_Stream_empty_n;
wire   [5:0] lenOffset_Stream_num_data_valid;
wire   [5:0] lenOffset_Stream_fifo_cap;
wire    input_size_c_full_n;
wire   [31:0] input_size_c_dout;
wire    input_size_c_empty_n;
wire   [2:0] input_size_c_num_data_valid;
wire   [2:0] input_size_c_fifo_cap;
wire    ap_sync_done;
wire   [0:0] start_for_lz4CompressPart2_U0_din;
wire    start_for_lz4CompressPart2_U0_full_n;
wire   [0:0] start_for_lz4CompressPart2_U0_dout;
wire    start_for_lz4CompressPart2_U0_empty_n;

lz4CompressEngineRun_lz4CompressPart1_4096_1_s lz4CompressPart1_4096_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(lz4CompressPart1_4096_1_U0_ap_start),
    .start_full_n(start_for_lz4CompressPart2_U0_full_n),
    .ap_done(lz4CompressPart1_4096_1_U0_ap_done),
    .ap_continue(lz4CompressPart1_4096_1_U0_ap_continue),
    .ap_idle(lz4CompressPart1_4096_1_U0_ap_idle),
    .ap_ready(lz4CompressPart1_4096_1_U0_ap_ready),
    .start_out(lz4CompressPart1_4096_1_U0_start_out),
    .start_write(lz4CompressPart1_4096_1_U0_start_write),
    .boosterStream_dout(boosterStream_dout),
    .boosterStream_empty_n(boosterStream_empty_n),
    .boosterStream_read(lz4CompressPart1_4096_1_U0_boosterStream_read),
    .boosterStream_num_data_valid(4'd0),
    .boosterStream_fifo_cap(4'd0),
    .lit_outStream_din(lz4CompressPart1_4096_1_U0_lit_outStream_din),
    .lit_outStream_full_n(lit_outStream_full_n),
    .lit_outStream_write(lz4CompressPart1_4096_1_U0_lit_outStream_write),
    .lit_outStream_num_data_valid(lit_outStream_num_data_valid),
    .lit_outStream_fifo_cap(lit_outStream_fifo_cap),
    .lenOffset_Stream_din(lz4CompressPart1_4096_1_U0_lenOffset_Stream_din),
    .lenOffset_Stream_full_n(lenOffset_Stream_full_n),
    .lenOffset_Stream_write(lz4CompressPart1_4096_1_U0_lenOffset_Stream_write),
    .lenOffset_Stream_num_data_valid(lenOffset_Stream_num_data_valid),
    .lenOffset_Stream_fifo_cap(lenOffset_Stream_fifo_cap),
    .input_size_dout(input_size_dout),
    .input_size_empty_n(input_size_empty_n),
    .input_size_read(lz4CompressPart1_4096_1_U0_input_size_read),
    .input_size_num_data_valid(3'd0),
    .input_size_fifo_cap(3'd0),
    .max_lit_limit(lz4CompressPart1_4096_1_U0_max_lit_limit),
    .max_lit_limit_ap_vld(lz4CompressPart1_4096_1_U0_max_lit_limit_ap_vld),
    .input_size_c_din(lz4CompressPart1_4096_1_U0_input_size_c_din),
    .input_size_c_full_n(input_size_c_full_n),
    .input_size_c_write(lz4CompressPart1_4096_1_U0_input_size_c_write),
    .input_size_c_num_data_valid(input_size_c_num_data_valid),
    .input_size_c_fifo_cap(input_size_c_fifo_cap)
);

lz4CompressEngineRun_lz4CompressPart2 lz4CompressPart2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(lz4CompressPart2_U0_ap_start),
    .ap_done(lz4CompressPart2_U0_ap_done),
    .ap_continue(lz4CompressPart2_U0_ap_continue),
    .ap_idle(lz4CompressPart2_U0_ap_idle),
    .ap_ready(lz4CompressPart2_U0_ap_ready),
    .lit_outStream_dout(lit_outStream_dout),
    .lit_outStream_empty_n(lit_outStream_empty_n),
    .lit_outStream_read(lz4CompressPart2_U0_lit_outStream_read),
    .lit_outStream_num_data_valid(lit_outStream_num_data_valid),
    .lit_outStream_fifo_cap(lit_outStream_fifo_cap),
    .lenOffset_Stream_dout(lenOffset_Stream_dout),
    .lenOffset_Stream_empty_n(lenOffset_Stream_empty_n),
    .lenOffset_Stream_read(lz4CompressPart2_U0_lenOffset_Stream_read),
    .lenOffset_Stream_num_data_valid(lenOffset_Stream_num_data_valid),
    .lenOffset_Stream_fifo_cap(lenOffset_Stream_fifo_cap),
    .lz4Out_din(lz4CompressPart2_U0_lz4Out_din),
    .lz4Out_full_n(lz4Out_full_n),
    .lz4Out_write(lz4CompressPart2_U0_lz4Out_write),
    .lz4Out_eos_din(lz4CompressPart2_U0_lz4Out_eos_din),
    .lz4Out_eos_full_n(lz4Out_eos_full_n),
    .lz4Out_eos_write(lz4CompressPart2_U0_lz4Out_eos_write),
    .lz4OutSize_din(lz4CompressPart2_U0_lz4OutSize_din),
    .lz4OutSize_full_n(lz4OutSize_full_n),
    .lz4OutSize_write(lz4CompressPart2_U0_lz4OutSize_write),
    .input_size_dout(input_size_c_dout),
    .input_size_empty_n(input_size_c_empty_n),
    .input_size_read(lz4CompressPart2_U0_input_size_read),
    .input_size_num_data_valid(input_size_c_num_data_valid),
    .input_size_fifo_cap(input_size_c_fifo_cap)
);

lz4CompressEngineRun_fifo_w8_d4096_A lit_outStream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(lz4CompressPart1_4096_1_U0_lit_outStream_din),
    .if_full_n(lit_outStream_full_n),
    .if_write(lz4CompressPart1_4096_1_U0_lit_outStream_write),
    .if_dout(lit_outStream_dout),
    .if_empty_n(lit_outStream_empty_n),
    .if_read(lz4CompressPart2_U0_lit_outStream_read),
    .if_num_data_valid(lit_outStream_num_data_valid),
    .if_fifo_cap(lit_outStream_fifo_cap)
);

lz4CompressEngineRun_fifo_w64_d32_S lenOffset_Stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(lz4CompressPart1_4096_1_U0_lenOffset_Stream_din),
    .if_full_n(lenOffset_Stream_full_n),
    .if_write(lz4CompressPart1_4096_1_U0_lenOffset_Stream_write),
    .if_dout(lenOffset_Stream_dout),
    .if_empty_n(lenOffset_Stream_empty_n),
    .if_read(lz4CompressPart2_U0_lenOffset_Stream_read),
    .if_num_data_valid(lenOffset_Stream_num_data_valid),
    .if_fifo_cap(lenOffset_Stream_fifo_cap)
);

lz4CompressEngineRun_fifo_w32_d2_S input_size_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(lz4CompressPart1_4096_1_U0_input_size_c_din),
    .if_full_n(input_size_c_full_n),
    .if_write(lz4CompressPart1_4096_1_U0_input_size_c_write),
    .if_dout(input_size_c_dout),
    .if_empty_n(input_size_c_empty_n),
    .if_read(lz4CompressPart2_U0_input_size_read),
    .if_num_data_valid(input_size_c_num_data_valid),
    .if_fifo_cap(input_size_c_fifo_cap)
);

lz4CompressEngineRun_start_for_lz4CompressPart2_U0 start_for_lz4CompressPart2_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_lz4CompressPart2_U0_din),
    .if_full_n(start_for_lz4CompressPart2_U0_full_n),
    .if_write(lz4CompressPart1_4096_1_U0_start_write),
    .if_dout(start_for_lz4CompressPart2_U0_dout),
    .if_empty_n(start_for_lz4CompressPart2_U0_empty_n),
    .if_read(lz4CompressPart2_U0_ap_ready)
);

assign ap_done = ap_sync_done;

assign ap_idle = (lz4CompressPart2_U0_ap_idle & lz4CompressPart1_4096_1_U0_ap_idle);

assign ap_ready = lz4CompressPart1_4096_1_U0_ap_ready;

assign ap_sync_continue = (ap_sync_done & ap_continue);

assign ap_sync_done = (lz4CompressPart2_U0_ap_done & lz4CompressPart1_4096_1_U0_ap_done);

assign boosterStream_read = lz4CompressPart1_4096_1_U0_boosterStream_read;

assign input_size_read = lz4CompressPart1_4096_1_U0_input_size_read;

assign lz4CompressPart1_4096_1_U0_ap_continue = ap_sync_continue;

assign lz4CompressPart1_4096_1_U0_ap_start = ap_start;

assign lz4CompressPart2_U0_ap_continue = ap_sync_continue;

assign lz4CompressPart2_U0_ap_start = start_for_lz4CompressPart2_U0_empty_n;

assign lz4OutSize_din = lz4CompressPart2_U0_lz4OutSize_din;

assign lz4OutSize_write = lz4CompressPart2_U0_lz4OutSize_write;

assign lz4Out_din = lz4CompressPart2_U0_lz4Out_din;

assign lz4Out_eos_din = lz4CompressPart2_U0_lz4Out_eos_din;

assign lz4Out_eos_write = lz4CompressPart2_U0_lz4Out_eos_write;

assign lz4Out_write = lz4CompressPart2_U0_lz4Out_write;

assign max_lit_limit = lz4CompressPart1_4096_1_U0_max_lit_limit;

assign max_lit_limit_ap_vld = lz4CompressPart1_4096_1_U0_max_lit_limit_ap_vld;

assign start_for_lz4CompressPart2_U0_din = 1'b1;

endmodule //lz4CompressEngineRun_lz4Compress_4096_1_s
