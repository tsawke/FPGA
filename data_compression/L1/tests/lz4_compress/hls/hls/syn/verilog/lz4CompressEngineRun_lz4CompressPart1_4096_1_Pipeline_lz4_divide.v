// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module lz4CompressEngineRun_lz4CompressPart1_4096_1_Pipeline_lz4_divide (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        boosterStream_dout,
        boosterStream_empty_n,
        boosterStream_read,
        boosterStream_num_data_valid,
        boosterStream_fifo_cap,
        lit_outStream_din,
        lit_outStream_full_n,
        lit_outStream_write,
        lit_outStream_num_data_valid,
        lit_outStream_fifo_cap,
        lenOffset_Stream_din,
        lenOffset_Stream_full_n,
        lenOffset_Stream_write,
        lenOffset_Stream_num_data_valid,
        lenOffset_Stream_fifo_cap,
        empty,
        input_size_4,
        sub,
        lit_count_out,
        lit_count_out_ap_vld,
        lit_count_flag_out,
        lit_count_flag_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] boosterStream_dout;
input   boosterStream_empty_n;
output   boosterStream_read;
input  [3:0] boosterStream_num_data_valid;
input  [3:0] boosterStream_fifo_cap;
output  [7:0] lit_outStream_din;
input   lit_outStream_full_n;
output   lit_outStream_write;
input  [12:0] lit_outStream_num_data_valid;
input  [12:0] lit_outStream_fifo_cap;
output  [63:0] lenOffset_Stream_din;
input   lenOffset_Stream_full_n;
output   lenOffset_Stream_write;
input  [5:0] lenOffset_Stream_num_data_valid;
input  [5:0] lenOffset_Stream_fifo_cap;
input  [31:0] empty;
input  [31:0] input_size_4;
input  [31:0] sub;
output  [31:0] lit_count_out;
output   lit_count_out_ap_vld;
output  [31:0] lit_count_flag_out;
output   lit_count_flag_out_ap_vld;

reg ap_idle;
reg boosterStream_read;
reg lit_outStream_write;
reg lenOffset_Stream_write;
reg lit_count_out_ap_vld;
reg lit_count_flag_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] icmp_ln59_fu_174_p2;
wire   [0:0] icmp_ln62_fu_179_p2;
reg    ap_predicate_op31_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln68_reg_362;
reg   [0:0] icmp_ln83_reg_366;
reg    ap_predicate_op52_write_state3;
reg    ap_block_state3_pp0_stage0_iter2_grp1;
reg    ap_block_pp0_stage0_subdone_grp1_done_reg;
reg    ap_block_pp0_stage0_subdone_grp1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_predicate_op57_write_state3;
reg    ap_block_state3_pp0_stage0_iter2_grp2;
reg    ap_block_pp0_stage0_subdone_grp2_done_reg;
reg    ap_block_pp0_stage0_subdone_grp2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    lenOffset_Stream_blk_n;
wire    ap_block_pp0_stage0_grp2;
reg    boosterStream_blk_n;
wire    ap_block_pp0_stage0;
reg    lit_outStream_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] lit_count_2_reg_336;
wire   [7:0] tCh_fu_189_p1;
reg   [7:0] tCh_reg_347;
wire   [7:0] tLen_fu_193_p3;
reg   [7:0] tLen_reg_352;
reg   [15:0] tOffset_reg_357;
wire   [0:0] icmp_ln68_fu_219_p2;
wire   [0:0] icmp_ln83_fu_225_p2;
reg   [31:0] i_fu_76;
wire   [31:0] i_11_fu_264_p2;
wire    ap_loop_init;
reg   [31:0] lit_count_flag_fu_80;
reg   [31:0] lit_count_fu_84;
wire   [31:0] lit_count_3_fu_236_p2;
reg   [31:0] tmpEncodedValue_fu_88;
reg    ap_block_pp0_stage0_01001_grp1;
reg    ap_block_pp0_stage0_11001_grp1;
reg    ap_block_pp0_stage0_01001_grp2;
reg    ap_block_pp0_stage0_11001_grp2;
reg    ap_block_pp0_stage0_01001;
wire   [19:0] tmp_47_fu_209_p4;
wire   [7:0] select_ln83_fu_252_p3;
wire   [31:0] zext_ln83_fu_260_p1;
wire   [7:0] match_len_fu_275_p2;
wire   [15:0] zext_ln74_fu_280_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_340;
reg    ap_condition_343;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp1_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp2_done_reg = 1'b0;
#0 i_fu_76 = 32'd0;
#0 lit_count_flag_fu_80 = 32'd0;
#0 lit_count_fu_84 = 32'd0;
#0 tmpEncodedValue_fu_88 = 32'd0;
#0 ap_done_reg = 1'b0;
end

lz4CompressEngineRun_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp1)) begin
            ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp2)) begin
            ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_76 <= 32'd0;
        end else if (((icmp_ln59_fu_174_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_76 <= i_11_fu_264_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
                        lit_count_flag_fu_80[0] <= 1'b0;
        end else if ((1'b1 == ap_condition_340)) begin
                        lit_count_flag_fu_80[0] <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln59_fu_174_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_fu_225_p2 == 1'd1) & (icmp_ln68_fu_219_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1)))) begin
        lit_count_fu_84 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln59_fu_174_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_fu_225_p2 == 1'd0) & (icmp_ln68_fu_219_p2 == 1'd1))) begin
        lit_count_fu_84 <= lit_count_3_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmpEncodedValue_fu_88 <= empty;
        end else if ((1'b1 == ap_condition_343)) begin
            tmpEncodedValue_fu_88 <= boosterStream_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln68_reg_362 <= icmp_ln68_fu_219_p2;
        icmp_ln83_reg_366 <= icmp_ln83_fu_225_p2;
        tCh_reg_347 <= tCh_fu_189_p1;
        tLen_reg_352 <= {{tmpEncodedValue_fu_88[15:8]}};
        tOffset_reg_357 <= {{tmpEncodedValue_fu_88[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lit_count_2_reg_336 <= lit_count_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln59_fu_174_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op31_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        boosterStream_blk_n = boosterStream_empty_n;
    end else begin
        boosterStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op31_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        boosterStream_read = 1'b1;
    end else begin
        boosterStream_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op57_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b0 == ap_block_pp0_stage0_grp2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lenOffset_Stream_blk_n = lenOffset_Stream_full_n;
    end else begin
        lenOffset_Stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op57_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lenOffset_Stream_write = 1'b1;
    end else begin
        lenOffset_Stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln59_fu_174_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1))) begin
        lit_count_flag_out_ap_vld = 1'b1;
    end else begin
        lit_count_flag_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln59_fu_174_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1))) begin
        lit_count_out_ap_vld = 1'b1;
    end else begin
        lit_count_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op52_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lit_outStream_blk_n = lit_outStream_full_n;
    end else begin
        lit_outStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op52_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lit_outStream_write = 1'b1;
    end else begin
        lit_outStream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp1)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp2)))));
end

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp1));
end

always @ (*) begin
    ap_block_pp0_stage0_01001_grp2 = ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp2));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp1)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp2)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp2 = ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp2));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp1)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp2)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp1 = ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp2 = ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp2));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op31_read_state2 == 1'b1) & (boosterStream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2_grp1 = ((ap_predicate_op52_write_state3 == 1'b1) & (lit_outStream_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2_grp2 = ((ap_predicate_op57_write_state3 == 1'b1) & (lenOffset_Stream_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_340 = ((icmp_ln59_fu_174_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln68_fu_219_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_343 = ((icmp_ln62_fu_179_p2 == 1'd1) & (icmp_ln59_fu_174_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

always @ (*) begin
    ap_predicate_op31_read_state2 = ((icmp_ln62_fu_179_p2 == 1'd1) & (icmp_ln59_fu_174_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op52_write_state3 = ((icmp_ln83_reg_366 == 1'd0) & (icmp_ln68_reg_362 == 1'd1));
end

always @ (*) begin
    ap_predicate_op57_write_state3 = ((icmp_ln83_reg_366 == 1'd1) & (icmp_ln68_reg_362 == 1'd1));
end

assign ap_ready = ap_ready_sig;

assign i_11_fu_264_p2 = (zext_ln83_fu_260_p1 + i_fu_76);

assign icmp_ln59_fu_174_p2 = ((i_fu_76 < input_size_4) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_179_p2 = ((i_fu_76 < sub) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_219_p2 = ((tmp_47_fu_209_p4 == 20'd0) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_225_p2 = ((tLen_fu_193_p3 != 8'd0) ? 1'b1 : 1'b0);

assign lenOffset_Stream_din = {{{lit_count_2_reg_336}, {tOffset_reg_357}}, {zext_ln74_fu_280_p1}};

assign lit_count_3_fu_236_p2 = (lit_count_fu_84 + 32'd1);

assign lit_count_flag_out = lit_count_flag_fu_80;

assign lit_count_out = lit_count_fu_84;

assign lit_outStream_din = tCh_reg_347;

assign match_len_fu_275_p2 = ($signed(tLen_reg_352) + $signed(8'd252));

assign select_ln83_fu_252_p3 = ((icmp_ln83_fu_225_p2[0:0] == 1'b1) ? tLen_fu_193_p3 : 8'd1);

assign tCh_fu_189_p1 = tmpEncodedValue_fu_88[7:0];

assign tLen_fu_193_p3 = {{tmpEncodedValue_fu_88[15:8]}};

assign tmp_47_fu_209_p4 = {{lit_count_fu_84[31:12]}};

assign zext_ln74_fu_280_p1 = match_len_fu_275_p2;

assign zext_ln83_fu_260_p1 = select_ln83_fu_252_p3;

always @ (posedge ap_clk) begin
    lit_count_flag_fu_80[31:1] <= 31'b0000000000000000000000000000000;
end

endmodule //lz4CompressEngineRun_lz4CompressPart1_4096_1_Pipeline_lz4_divide
