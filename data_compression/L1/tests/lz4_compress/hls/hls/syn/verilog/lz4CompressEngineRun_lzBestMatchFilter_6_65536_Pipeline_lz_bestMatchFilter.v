// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module lz4CompressEngineRun_lzBestMatchFilter_6_65536_Pipeline_lz_bestMatchFilter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        compressdStream_dout,
        compressdStream_empty_n,
        compressdStream_read,
        compressdStream_num_data_valid,
        compressdStream_fifo_cap,
        bestMatchStream_din,
        bestMatchStream_full_n,
        bestMatchStream_write,
        bestMatchStream_num_data_valid,
        bestMatchStream_fifo_cap,
        compare_window_5,
        compare_window_4,
        compare_window_3,
        compare_window_2,
        compare_window_1,
        compare_window,
        input_size_2,
        compare_window_12_out,
        compare_window_12_out_ap_vld,
        compare_window_13_out,
        compare_window_13_out_ap_vld,
        compare_window_14_out,
        compare_window_14_out_ap_vld,
        compare_window_15_out,
        compare_window_15_out_ap_vld,
        compare_window_16_out,
        compare_window_16_out_ap_vld,
        compare_window_17_out,
        compare_window_17_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] compressdStream_dout;
input   compressdStream_empty_n;
output   compressdStream_read;
input  [3:0] compressdStream_num_data_valid;
input  [3:0] compressdStream_fifo_cap;
output  [31:0] bestMatchStream_din;
input   bestMatchStream_full_n;
output   bestMatchStream_write;
input  [31:0] bestMatchStream_num_data_valid;
input  [31:0] bestMatchStream_fifo_cap;
input  [31:0] compare_window_5;
input  [31:0] compare_window_4;
input  [31:0] compare_window_3;
input  [31:0] compare_window_2;
input  [31:0] compare_window_1;
input  [31:0] compare_window;
input  [31:0] input_size_2;
output  [31:0] compare_window_12_out;
output   compare_window_12_out_ap_vld;
output  [31:0] compare_window_13_out;
output   compare_window_13_out_ap_vld;
output  [31:0] compare_window_14_out;
output   compare_window_14_out_ap_vld;
output  [31:0] compare_window_15_out;
output   compare_window_15_out_ap_vld;
output  [31:0] compare_window_16_out;
output   compare_window_16_out_ap_vld;
output  [31:0] compare_window_17_out;
output   compare_window_17_out_ap_vld;

reg ap_idle;
reg compressdStream_read;
reg bestMatchStream_write;
reg compare_window_12_out_ap_vld;
reg compare_window_13_out_ap_vld;
reg compare_window_14_out_ap_vld;
reg compare_window_15_out_ap_vld;
reg compare_window_16_out_ap_vld;
reg compare_window_17_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln327_reg_608;
reg    ap_block_state2_pp0_stage0_iter1_grp1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln327_fu_251_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    compressdStream_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    bestMatchStream_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] i_fu_88;
wire   [31:0] i_9_fu_257_p2;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_i_8;
wire    ap_block_pp0_stage0;
reg   [31:0] outValue_fu_92;
reg    ap_block_pp0_stage0_11001_grp1;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [31:0] compareValue_fu_96;
reg   [31:0] compareValue_1_fu_100;
reg   [31:0] compareValue_2_fu_104;
reg   [31:0] compareValue_3_fu_108;
reg   [31:0] compareValue_4_fu_112;
reg    ap_block_pp0_stage0_01001_grp1;
wire   [7:0] match_length_fu_291_p3;
wire   [7:0] compareLen_fu_303_p3;
wire   [0:0] icmp_ln344_fu_311_p2;
wire   [8:0] zext_ln342_fu_299_p1;
wire   [7:0] compareLen_1_fu_323_p3;
wire   [8:0] add_ln344_fu_331_p2;
wire   [8:0] zext_ln344_fu_337_p1;
wire   [0:0] icmp_ln344_1_fu_341_p2;
wire   [7:0] compareLen_2_fu_353_p3;
wire   [8:0] add_ln344_1_fu_361_p2;
wire   [8:0] zext_ln344_1_fu_367_p1;
wire   [0:0] icmp_ln344_2_fu_371_p2;
wire   [7:0] compareLen_3_fu_383_p3;
wire   [8:0] add_ln344_2_fu_391_p2;
wire   [8:0] zext_ln344_2_fu_397_p1;
wire   [0:0] icmp_ln344_3_fu_401_p2;
wire   [7:0] compareLen_4_fu_413_p3;
wire   [8:0] add_ln344_3_fu_421_p2;
wire   [8:0] zext_ln344_3_fu_427_p1;
wire   [0:0] icmp_ln344_4_fu_431_p2;
wire   [7:0] compareLen_5_fu_443_p3;
wire   [8:0] add_ln344_4_fu_451_p2;
wire   [8:0] zext_ln344_4_fu_457_p1;
wire   [0:0] icmp_ln344_5_fu_461_p2;
wire   [0:0] xor_ln344_fu_347_p2;
wire   [0:0] xor_ln344_1_fu_377_p2;
wire   [0:0] and_ln344_fu_473_p2;
wire   [0:0] best_match_fu_317_p2;
wire   [0:0] xor_ln344_3_fu_437_p2;
wire   [0:0] xor_ln344_4_fu_467_p2;
wire   [0:0] and_ln344_2_fu_485_p2;
wire   [0:0] xor_ln344_2_fu_407_p2;
wire   [0:0] and_ln344_3_fu_491_p2;
wire   [0:0] and_ln344_1_fu_479_p2;
wire   [0:0] best_match_1_fu_497_p2;
wire   [31:0] outValue_3_fu_503_p5;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_fu_88 = 32'd0;
#0 outValue_fu_92 = 32'd0;
#0 compareValue_fu_96 = 32'd0;
#0 compareValue_1_fu_100 = 32'd0;
#0 compareValue_2_fu_104 = 32'd0;
#0 compareValue_3_fu_108 = 32'd0;
#0 compareValue_4_fu_112 = 32'd0;
#0 ap_done_reg = 1'b0;
end

lz4CompressEngineRun_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            compareValue_1_fu_100 <= compare_window_2;
        end else if (((icmp_ln327_reg_608 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            compareValue_1_fu_100 <= compareValue_2_fu_104;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            compareValue_2_fu_104 <= compare_window_3;
        end else if (((icmp_ln327_reg_608 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            compareValue_2_fu_104 <= compareValue_3_fu_108;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            compareValue_3_fu_108 <= compare_window_4;
        end else if (((icmp_ln327_reg_608 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            compareValue_3_fu_108 <= compareValue_4_fu_112;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            compareValue_4_fu_112 <= compare_window_5;
        end else if (((icmp_ln327_reg_608 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            compareValue_4_fu_112 <= compressdStream_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            compareValue_fu_96 <= compare_window_1;
        end else if (((icmp_ln327_reg_608 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            compareValue_fu_96 <= compareValue_1_fu_100;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln327_fu_251_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_88 <= i_9_fu_257_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_88 <= 32'd6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outValue_fu_92 <= compare_window;
        end else if (((icmp_ln327_reg_608 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            outValue_fu_92 <= compareValue_fu_96;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln327_reg_608 <= icmp_ln327_fu_251_p2;
    end
end

always @ (*) begin
    if (((icmp_ln327_fu_251_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_8 = 32'd6;
    end else begin
        ap_sig_allocacmp_i_8 = i_fu_88;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (icmp_ln327_reg_608 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bestMatchStream_blk_n = bestMatchStream_full_n;
    end else begin
        bestMatchStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (icmp_ln327_reg_608 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bestMatchStream_write = 1'b1;
    end else begin
        bestMatchStream_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (icmp_ln327_reg_608 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        compare_window_12_out_ap_vld = 1'b1;
    end else begin
        compare_window_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (icmp_ln327_reg_608 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        compare_window_13_out_ap_vld = 1'b1;
    end else begin
        compare_window_13_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (icmp_ln327_reg_608 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        compare_window_14_out_ap_vld = 1'b1;
    end else begin
        compare_window_14_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (icmp_ln327_reg_608 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        compare_window_15_out_ap_vld = 1'b1;
    end else begin
        compare_window_15_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (icmp_ln327_reg_608 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        compare_window_16_out_ap_vld = 1'b1;
    end else begin
        compare_window_16_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (icmp_ln327_reg_608 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        compare_window_17_out_ap_vld = 1'b1;
    end else begin
        compare_window_17_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (icmp_ln327_reg_608 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        compressdStream_blk_n = compressdStream_empty_n;
    end else begin
        compressdStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (icmp_ln327_reg_608 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        compressdStream_read = 1'b1;
    end else begin
        compressdStream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln344_1_fu_361_p2 = (zext_ln342_fu_299_p1 + 9'd2);

assign add_ln344_2_fu_391_p2 = (zext_ln342_fu_299_p1 + 9'd3);

assign add_ln344_3_fu_421_p2 = (zext_ln342_fu_299_p1 + 9'd4);

assign add_ln344_4_fu_451_p2 = (zext_ln342_fu_299_p1 + 9'd5);

assign add_ln344_fu_331_p2 = (zext_ln342_fu_299_p1 + 9'd1);

assign and_ln344_1_fu_479_p2 = (best_match_fu_317_p2 & and_ln344_fu_473_p2);

assign and_ln344_2_fu_485_p2 = (xor_ln344_4_fu_467_p2 & xor_ln344_3_fu_437_p2);

assign and_ln344_3_fu_491_p2 = (xor_ln344_2_fu_407_p2 & and_ln344_2_fu_485_p2);

assign and_ln344_fu_473_p2 = (xor_ln344_fu_347_p2 & xor_ln344_1_fu_377_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1_grp1 = (((icmp_ln327_reg_608 == 1'd1) & (bestMatchStream_full_n == 1'b0)) | ((icmp_ln327_reg_608 == 1'd1) & (compressdStream_empty_n == 1'b0)));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign bestMatchStream_din = ((best_match_1_fu_497_p2[0:0] == 1'b1) ? outValue_fu_92 : outValue_3_fu_503_p5);

assign best_match_1_fu_497_p2 = (and_ln344_3_fu_491_p2 & and_ln344_1_fu_479_p2);

assign best_match_fu_317_p2 = (icmp_ln344_fu_311_p2 ^ 1'd1);

assign compareLen_1_fu_323_p3 = {{compareValue_1_fu_100[15:8]}};

assign compareLen_2_fu_353_p3 = {{compareValue_2_fu_104[15:8]}};

assign compareLen_3_fu_383_p3 = {{compareValue_3_fu_108[15:8]}};

assign compareLen_4_fu_413_p3 = {{compareValue_4_fu_112[15:8]}};

assign compareLen_5_fu_443_p3 = {{compressdStream_dout[15:8]}};

assign compareLen_fu_303_p3 = {{compareValue_fu_96[15:8]}};

assign compare_window_12_out = compareValue_4_fu_112;

assign compare_window_13_out = compareValue_3_fu_108;

assign compare_window_14_out = compareValue_2_fu_104;

assign compare_window_15_out = compareValue_1_fu_100;

assign compare_window_16_out = compareValue_fu_96;

assign compare_window_17_out = outValue_fu_92;

assign i_9_fu_257_p2 = (ap_sig_allocacmp_i_8 + 32'd1);

assign icmp_ln327_fu_251_p2 = ((ap_sig_allocacmp_i_8 < input_size_2) ? 1'b1 : 1'b0);

assign icmp_ln344_1_fu_341_p2 = ((add_ln344_fu_331_p2 < zext_ln344_fu_337_p1) ? 1'b1 : 1'b0);

assign icmp_ln344_2_fu_371_p2 = ((add_ln344_1_fu_361_p2 < zext_ln344_1_fu_367_p1) ? 1'b1 : 1'b0);

assign icmp_ln344_3_fu_401_p2 = ((add_ln344_2_fu_391_p2 < zext_ln344_2_fu_397_p1) ? 1'b1 : 1'b0);

assign icmp_ln344_4_fu_431_p2 = ((add_ln344_3_fu_421_p2 < zext_ln344_3_fu_427_p1) ? 1'b1 : 1'b0);

assign icmp_ln344_5_fu_461_p2 = ((add_ln344_4_fu_451_p2 < zext_ln344_4_fu_457_p1) ? 1'b1 : 1'b0);

assign icmp_ln344_fu_311_p2 = ((match_length_fu_291_p3 < compareLen_fu_303_p3) ? 1'b1 : 1'b0);

assign match_length_fu_291_p3 = {{outValue_fu_92[15:8]}};

assign outValue_3_fu_503_p5 = {{24'd0}, {outValue_fu_92[7:0]}};

assign xor_ln344_1_fu_377_p2 = (icmp_ln344_2_fu_371_p2 ^ 1'd1);

assign xor_ln344_2_fu_407_p2 = (icmp_ln344_3_fu_401_p2 ^ 1'd1);

assign xor_ln344_3_fu_437_p2 = (icmp_ln344_4_fu_431_p2 ^ 1'd1);

assign xor_ln344_4_fu_467_p2 = (icmp_ln344_5_fu_461_p2 ^ 1'd1);

assign xor_ln344_fu_347_p2 = (icmp_ln344_1_fu_341_p2 ^ 1'd1);

assign zext_ln342_fu_299_p1 = match_length_fu_291_p3;

assign zext_ln344_1_fu_367_p1 = compareLen_2_fu_353_p3;

assign zext_ln344_2_fu_397_p1 = compareLen_3_fu_383_p3;

assign zext_ln344_3_fu_427_p1 = compareLen_4_fu_413_p3;

assign zext_ln344_4_fu_457_p1 = compareLen_5_fu_443_p3;

assign zext_ln344_fu_337_p1 = compareLen_1_fu_323_p3;

endmodule //lz4CompressEngineRun_lzBestMatchFilter_6_65536_Pipeline_lz_bestMatchFilter
